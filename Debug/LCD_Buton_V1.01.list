
LCD_Buton_V1.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004770  08004770  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004778  08004778  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000150  080048cc  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080048cc  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008776  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac1  00000000  00000000  00028935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000642  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aff  00000000  00000000  0002b27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c34e  00000000  00000000  0004bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c689f  00000000  00000000  000580c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026e8  00000000  00000000  0011e968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00121050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080046cc 	.word	0x080046cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	080046cc 	.word	0x080046cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2uiz>:
 8000738:	004a      	lsls	r2, r1, #1
 800073a:	d211      	bcs.n	8000760 <__aeabi_d2uiz+0x28>
 800073c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000740:	d211      	bcs.n	8000766 <__aeabi_d2uiz+0x2e>
 8000742:	d50d      	bpl.n	8000760 <__aeabi_d2uiz+0x28>
 8000744:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000748:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800074c:	d40e      	bmi.n	800076c <__aeabi_d2uiz+0x34>
 800074e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000756:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075a:	fa23 f002 	lsr.w	r0, r3, r2
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076a:	d102      	bne.n	8000772 <__aeabi_d2uiz+0x3a>
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr

08000778 <__aeabi_uldivmod>:
 8000778:	b953      	cbnz	r3, 8000790 <__aeabi_uldivmod+0x18>
 800077a:	b94a      	cbnz	r2, 8000790 <__aeabi_uldivmod+0x18>
 800077c:	2900      	cmp	r1, #0
 800077e:	bf08      	it	eq
 8000780:	2800      	cmpeq	r0, #0
 8000782:	bf1c      	itt	ne
 8000784:	f04f 31ff 	movne.w	r1, #4294967295
 8000788:	f04f 30ff 	movne.w	r0, #4294967295
 800078c:	f000 b970 	b.w	8000a70 <__aeabi_idiv0>
 8000790:	f1ad 0c08 	sub.w	ip, sp, #8
 8000794:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000798:	f000 f806 	bl	80007a8 <__udivmoddi4>
 800079c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a4:	b004      	add	sp, #16
 80007a6:	4770      	bx	lr

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	460f      	mov	r7, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4694      	mov	ip, r2
 80007bc:	d965      	bls.n	800088a <__udivmoddi4+0xe2>
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	b143      	cbz	r3, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	f1c3 0220 	rsb	r2, r3, #32
 80007cc:	409f      	lsls	r7, r3
 80007ce:	fa20 f202 	lsr.w	r2, r0, r2
 80007d2:	4317      	orrs	r7, r2
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007da:	fa1f f58c 	uxth.w	r5, ip
 80007de:	fbb7 f1fe 	udiv	r1, r7, lr
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ec:	fb01 f005 	mul.w	r0, r1, r5
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x62>
 80007f4:	eb1c 0202 	adds.w	r2, ip, r2
 80007f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007fc:	f080 811c 	bcs.w	8000a38 <__udivmoddi4+0x290>
 8000800:	4290      	cmp	r0, r2
 8000802:	f240 8119 	bls.w	8000a38 <__udivmoddi4+0x290>
 8000806:	3902      	subs	r1, #2
 8000808:	4462      	add	r2, ip
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	b2a4      	uxth	r4, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081a:	fb00 f505 	mul.w	r5, r0, r5
 800081e:	42a5      	cmp	r5, r4
 8000820:	d90a      	bls.n	8000838 <__udivmoddi4+0x90>
 8000822:	eb1c 0404 	adds.w	r4, ip, r4
 8000826:	f100 32ff 	add.w	r2, r0, #4294967295
 800082a:	f080 8107 	bcs.w	8000a3c <__udivmoddi4+0x294>
 800082e:	42a5      	cmp	r5, r4
 8000830:	f240 8104 	bls.w	8000a3c <__udivmoddi4+0x294>
 8000834:	4464      	add	r4, ip
 8000836:	3802      	subs	r0, #2
 8000838:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	2100      	movs	r1, #0
 8000840:	b11e      	cbz	r6, 800084a <__udivmoddi4+0xa2>
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	e9c6 4300 	strd	r4, r3, [r6]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0xbc>
 8000852:	2e00      	cmp	r6, #0
 8000854:	f000 80ed 	beq.w	8000a32 <__udivmoddi4+0x28a>
 8000858:	2100      	movs	r1, #0
 800085a:	e9c6 0500 	strd	r0, r5, [r6]
 800085e:	4608      	mov	r0, r1
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	fab3 f183 	clz	r1, r3
 8000868:	2900      	cmp	r1, #0
 800086a:	d149      	bne.n	8000900 <__udivmoddi4+0x158>
 800086c:	42ab      	cmp	r3, r5
 800086e:	d302      	bcc.n	8000876 <__udivmoddi4+0xce>
 8000870:	4282      	cmp	r2, r0
 8000872:	f200 80f8 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 8000876:	1a84      	subs	r4, r0, r2
 8000878:	eb65 0203 	sbc.w	r2, r5, r3
 800087c:	2001      	movs	r0, #1
 800087e:	4617      	mov	r7, r2
 8000880:	2e00      	cmp	r6, #0
 8000882:	d0e2      	beq.n	800084a <__udivmoddi4+0xa2>
 8000884:	e9c6 4700 	strd	r4, r7, [r6]
 8000888:	e7df      	b.n	800084a <__udivmoddi4+0xa2>
 800088a:	b902      	cbnz	r2, 800088e <__udivmoddi4+0xe6>
 800088c:	deff      	udf	#255	; 0xff
 800088e:	fab2 f382 	clz	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8090 	bne.w	80009b8 <__udivmoddi4+0x210>
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f fe8c 	uxth.w	lr, ip
 80008a2:	2101      	movs	r1, #1
 80008a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008a8:	fb07 2015 	mls	r0, r7, r5, r2
 80008ac:	0c22      	lsrs	r2, r4, #16
 80008ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008b2:	fb0e f005 	mul.w	r0, lr, r5
 80008b6:	4290      	cmp	r0, r2
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x124>
 80008ba:	eb1c 0202 	adds.w	r2, ip, r2
 80008be:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x122>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f200 80cb 	bhi.w	8000a60 <__udivmoddi4+0x2b8>
 80008ca:	4645      	mov	r5, r8
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008d4:	fb07 2210 	mls	r2, r7, r0, r2
 80008d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008dc:	fb0e fe00 	mul.w	lr, lr, r0
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x14e>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x14c>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f200 80bb 	bhi.w	8000a6a <__udivmoddi4+0x2c2>
 80008f4:	4610      	mov	r0, r2
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008fe:	e79f      	b.n	8000840 <__udivmoddi4+0x98>
 8000900:	f1c1 0720 	rsb	r7, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 fc07 	lsr.w	ip, r2, r7
 800090a:	ea4c 0c03 	orr.w	ip, ip, r3
 800090e:	fa05 f401 	lsl.w	r4, r5, r1
 8000912:	fa20 f307 	lsr.w	r3, r0, r7
 8000916:	40fd      	lsrs	r5, r7
 8000918:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800091c:	4323      	orrs	r3, r4
 800091e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	fb09 5518 	mls	r5, r9, r8, r5
 800092a:	0c1c      	lsrs	r4, r3, #16
 800092c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000930:	fb08 f50e 	mul.w	r5, r8, lr
 8000934:	42a5      	cmp	r5, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	fa00 f001 	lsl.w	r0, r0, r1
 800093e:	d90b      	bls.n	8000958 <__udivmoddi4+0x1b0>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 8088 	bcs.w	8000a5c <__udivmoddi4+0x2b4>
 800094c:	42a5      	cmp	r5, r4
 800094e:	f240 8085 	bls.w	8000a5c <__udivmoddi4+0x2b4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	4464      	add	r4, ip
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	b29d      	uxth	r5, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000968:	fb03 fe0e 	mul.w	lr, r3, lr
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x1da>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f103 35ff 	add.w	r5, r3, #4294967295
 8000978:	d26c      	bcs.n	8000a54 <__udivmoddi4+0x2ac>
 800097a:	45a6      	cmp	lr, r4
 800097c:	d96a      	bls.n	8000a54 <__udivmoddi4+0x2ac>
 800097e:	3b02      	subs	r3, #2
 8000980:	4464      	add	r4, ip
 8000982:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000986:	fba3 9502 	umull	r9, r5, r3, r2
 800098a:	eba4 040e 	sub.w	r4, r4, lr
 800098e:	42ac      	cmp	r4, r5
 8000990:	46c8      	mov	r8, r9
 8000992:	46ae      	mov	lr, r5
 8000994:	d356      	bcc.n	8000a44 <__udivmoddi4+0x29c>
 8000996:	d053      	beq.n	8000a40 <__udivmoddi4+0x298>
 8000998:	b156      	cbz	r6, 80009b0 <__udivmoddi4+0x208>
 800099a:	ebb0 0208 	subs.w	r2, r0, r8
 800099e:	eb64 040e 	sbc.w	r4, r4, lr
 80009a2:	fa04 f707 	lsl.w	r7, r4, r7
 80009a6:	40ca      	lsrs	r2, r1
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	4317      	orrs	r7, r2
 80009ac:	e9c6 7400 	strd	r7, r4, [r6]
 80009b0:	4618      	mov	r0, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	f1c3 0120 	rsb	r1, r3, #32
 80009bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009c0:	fa20 f201 	lsr.w	r2, r0, r1
 80009c4:	fa25 f101 	lsr.w	r1, r5, r1
 80009c8:	409d      	lsls	r5, r3
 80009ca:	432a      	orrs	r2, r5
 80009cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d0:	fa1f fe8c 	uxth.w	lr, ip
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1510 	mls	r5, r7, r0, r1
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009e2:	fb00 f50e 	mul.w	r5, r0, lr
 80009e6:	428d      	cmp	r5, r1
 80009e8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x258>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009f6:	d22f      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d92d      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 80009fc:	3802      	subs	r0, #2
 80009fe:	4461      	add	r1, ip
 8000a00:	1b49      	subs	r1, r1, r5
 8000a02:	b292      	uxth	r2, r2
 8000a04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a08:	fb07 1115 	mls	r1, r7, r5, r1
 8000a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a10:	fb05 f10e 	mul.w	r1, r5, lr
 8000a14:	4291      	cmp	r1, r2
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x282>
 8000a18:	eb1c 0202 	adds.w	r2, ip, r2
 8000a1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a20:	d216      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d914      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 8000a26:	3d02      	subs	r5, #2
 8000a28:	4462      	add	r2, ip
 8000a2a:	1a52      	subs	r2, r2, r1
 8000a2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a30:	e738      	b.n	80008a4 <__udivmoddi4+0xfc>
 8000a32:	4631      	mov	r1, r6
 8000a34:	4630      	mov	r0, r6
 8000a36:	e708      	b.n	800084a <__udivmoddi4+0xa2>
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e6e6      	b.n	800080a <__udivmoddi4+0x62>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	e6fb      	b.n	8000838 <__udivmoddi4+0x90>
 8000a40:	4548      	cmp	r0, r9
 8000a42:	d2a9      	bcs.n	8000998 <__udivmoddi4+0x1f0>
 8000a44:	ebb9 0802 	subs.w	r8, r9, r2
 8000a48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7a3      	b.n	8000998 <__udivmoddi4+0x1f0>
 8000a50:	4645      	mov	r5, r8
 8000a52:	e7ea      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a54:	462b      	mov	r3, r5
 8000a56:	e794      	b.n	8000982 <__udivmoddi4+0x1da>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	e7d1      	b.n	8000a00 <__udivmoddi4+0x258>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e77b      	b.n	8000958 <__udivmoddi4+0x1b0>
 8000a60:	3d02      	subs	r5, #2
 8000a62:	4462      	add	r2, ip
 8000a64:	e732      	b.n	80008cc <__udivmoddi4+0x124>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e70a      	b.n	8000880 <__udivmoddi4+0xd8>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	e742      	b.n	80008f6 <__udivmoddi4+0x14e>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <but_state>:
double exit_timeOut = 0;

int btn_flag = 0;
int ddd = 0;

void but_state() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	/*PULL-UP*/
	if (HAL_GPIO_ReadPin(OK_BUT_GPIO_Port, OK_BUT_Pin) == 0) {
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <but_state+0x64>)
 8000a7e:	f001 fef9 	bl	8002874 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d11e      	bne.n	8000ac6 <but_state+0x52>
		if (btn_ctr_ok == 200) { //buton parazit engelle
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <but_state+0x68>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2bc8      	cmp	r3, #200	; 0xc8
 8000a8e:	d110      	bne.n	8000ab2 <but_state+0x3e>
			btn_ctr_ok = 210;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <but_state+0x68>)
 8000a92:	22d2      	movs	r2, #210	; 0xd2
 8000a94:	601a      	str	r2, [r3, #0]
			btn_ok = 1;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <but_state+0x6c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
			btn_flag = (btn_flag == 0) ? 1 : 0;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <but_state+0x70>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <but_state+0x70>)
 8000aae:	601a      	str	r2, [r3, #0]
	} else {
		btn_ok = 0;
		btn_ctr_ok = 0;

	}
}
 8000ab0:	e00f      	b.n	8000ad2 <but_state+0x5e>
		} else if (btn_ctr_ok < 200) {
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <but_state+0x68>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2bc7      	cmp	r3, #199	; 0xc7
 8000ab8:	dc0b      	bgt.n	8000ad2 <but_state+0x5e>
			btn_ctr_ok++;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <but_state+0x68>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <but_state+0x68>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	e005      	b.n	8000ad2 <but_state+0x5e>
		btn_ok = 0;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <but_state+0x6c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
		btn_ctr_ok = 0;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <but_state+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	200001a8 	.word	0x200001a8
 8000ae0:	200001ac 	.word	0x200001ac
 8000ae4:	20000210 	.word	0x20000210

08000ae8 <but_task>:

void but_task() {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	if (menu_next == 0) { //menüde değilse
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <but_task+0x4c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <but_task+0x1c>
		if (btn_ok == 1) {
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <but_task+0x50>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d116      	bne.n	8000b2a <but_task+0x42>
			menu_next = 1;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <but_task+0x4c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
			main_next = 1;
		} else if (btn_flag == 1) {
			main_next = 2;
		}
	}
}
 8000b02:	e012      	b.n	8000b2a <but_task+0x42>
	} else if (menu_next == 2) {
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <but_task+0x4c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d10e      	bne.n	8000b2a <but_task+0x42>
		if (btn_flag == 0) {
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <but_task+0x54>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <but_task+0x34>
			main_next = 1;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <but_task+0x58>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	e006      	b.n	8000b2a <but_task+0x42>
		} else if (btn_flag == 1) {
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <but_task+0x54>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <but_task+0x42>
			main_next = 2;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <but_task+0x58>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	200001b8 	.word	0x200001b8
 8000b38:	200001ac 	.word	0x200001ac
 8000b3c:	20000210 	.word	0x20000210
 8000b40:	200001d4 	.word	0x200001d4

08000b44 <main_string>:

void main_string() {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	if (main_next == 1) { //menüde değilse
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <main_string+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d103      	bne.n	8000b58 <main_string+0x14>
//		lcd_put_cur(0, 2);
//		lcd_send_string("DURUM");
//		lcd_put_cur(1, 3);
//		lcd_send_string("ON");

		ddd=1;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <main_string+0x30>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
//		lcd_put_cur(1, 3);
//		lcd_send_string("OFF");


	}
}
 8000b56:	e006      	b.n	8000b66 <main_string+0x22>
	} else if (main_next == 2) {
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <main_string+0x2c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d102      	bne.n	8000b66 <main_string+0x22>
		ddd=2;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <main_string+0x30>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	200001d4 	.word	0x200001d4
 8000b74:	20000214 	.word	0x20000214

08000b78 <next_process>:

void next_process() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	/*PULL-UP*/
	if (menu_next == 1) {
 8000b7c:	4b8e      	ldr	r3, [pc, #568]	; (8000db8 <next_process+0x240>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d110      	bne.n	8000ba6 <next_process+0x2e>
		menu_timeOut = milis + 3000;
 8000b84:	4b8d      	ldr	r3, [pc, #564]	; (8000dbc <next_process+0x244>)
 8000b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b8a:	a389      	add	r3, pc, #548	; (adr r3, 8000db0 <next_process+0x238>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff fb94 	bl	80002bc <__adddf3>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4989      	ldr	r1, [pc, #548]	; (8000dc0 <next_process+0x248>)
 8000b9a:	e9c1 2300 	strd	r2, r3, [r1]
		menu_next = 2;
 8000b9e:	4b86      	ldr	r3, [pc, #536]	; (8000db8 <next_process+0x240>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e022      	b.n	8000bec <next_process+0x74>

	} else if (menu_next == 2) {
 8000ba6:	4b84      	ldr	r3, [pc, #528]	; (8000db8 <next_process+0x240>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d11e      	bne.n	8000bec <next_process+0x74>
		if (btn_ok == 0) {
 8000bae:	4b85      	ldr	r3, [pc, #532]	; (8000dc4 <next_process+0x24c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10c      	bne.n	8000bd0 <next_process+0x58>
			menu_timeOut = milis + 3000;
 8000bb6:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <next_process+0x244>)
 8000bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bbc:	a37c      	add	r3, pc, #496	; (adr r3, 8000db0 <next_process+0x238>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	f7ff fb7b 	bl	80002bc <__adddf3>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	497d      	ldr	r1, [pc, #500]	; (8000dc0 <next_process+0x248>)
 8000bcc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (milis > menu_timeOut) {
 8000bd0:	4b7a      	ldr	r3, [pc, #488]	; (8000dbc <next_process+0x244>)
 8000bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd6:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <next_process+0x248>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fda2 	bl	8000724 <__aeabi_dcmpgt>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <next_process+0x74>

			menu_next = 3;
 8000be6:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <next_process+0x240>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	601a      	str	r2, [r3, #0]
		}
	}
	if (menu_next == 3) {
 8000bec:	4b72      	ldr	r3, [pc, #456]	; (8000db8 <next_process+0x240>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d11c      	bne.n	8000c2e <next_process+0xb6>
		main_next = 0;
 8000bf4:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <next_process+0x250>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000bfa:	f001 f87b 	bl	8001cf4 <lcd_clear>
		lcd_put_cur(0, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f001 f88e 	bl	8001d22 <lcd_put_cur>
		lcd_send_string("menu 1 ");
 8000c06:	4871      	ldr	r0, [pc, #452]	; (8000dcc <next_process+0x254>)
 8000c08:	f001 f8e7 	bl	8001dda <lcd_send_string>
		menu_timeOut = milis + 3000;
 8000c0c:	4b6b      	ldr	r3, [pc, #428]	; (8000dbc <next_process+0x244>)
 8000c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c12:	a367      	add	r3, pc, #412	; (adr r3, 8000db0 <next_process+0x238>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fb50 	bl	80002bc <__adddf3>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4967      	ldr	r1, [pc, #412]	; (8000dc0 <next_process+0x248>)
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]
		menu_next = 10;
 8000c26:	4b64      	ldr	r3, [pc, #400]	; (8000db8 <next_process+0x240>)
 8000c28:	220a      	movs	r2, #10
 8000c2a:	601a      	str	r2, [r3, #0]
//			HAL_Delay(500);
//			main_screen();
//			menu_next = 0;
//		}
	}
}
 8000c2c:	e0be      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 10) {
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <next_process+0x240>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b0a      	cmp	r3, #10
 8000c34:	d124      	bne.n	8000c80 <next_process+0x108>
		if (milis > menu_timeOut) {
 8000c36:	4b61      	ldr	r3, [pc, #388]	; (8000dbc <next_process+0x244>)
 8000c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c3c:	4b60      	ldr	r3, [pc, #384]	; (8000dc0 <next_process+0x248>)
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	f7ff fd6f 	bl	8000724 <__aeabi_dcmpgt>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <next_process+0xdc>
			menu_next = 11;
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <next_process+0x240>)
 8000c4e:	220b      	movs	r2, #11
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	e0ab      	b.n	8000dac <next_process+0x234>
			if (btn_ok == 0) {
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <next_process+0x24c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f040 80a7 	bne.w	8000dac <next_process+0x234>
				menu1_next = 1;
 8000c5e:	4b5c      	ldr	r3, [pc, #368]	; (8000dd0 <next_process+0x258>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
				menu2_next = 0;
 8000c64:	4b5b      	ldr	r3, [pc, #364]	; (8000dd4 <next_process+0x25c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
				menu3_next = 0;
 8000c6a:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <next_process+0x260>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
				main_next = 0;
 8000c70:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <next_process+0x250>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
				menu_next = 1000;
 8000c76:	4b50      	ldr	r3, [pc, #320]	; (8000db8 <next_process+0x240>)
 8000c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	e095      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 11) {
 8000c80:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <next_process+0x240>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b0b      	cmp	r3, #11
 8000c86:	d119      	bne.n	8000cbc <next_process+0x144>
		lcd_clear();
 8000c88:	f001 f834 	bl	8001cf4 <lcd_clear>
		lcd_put_cur(0, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f847 	bl	8001d22 <lcd_put_cur>
		lcd_send_string("menu 2 ");
 8000c94:	4851      	ldr	r0, [pc, #324]	; (8000ddc <next_process+0x264>)
 8000c96:	f001 f8a0 	bl	8001dda <lcd_send_string>
		menu_timeOut = milis + 3000;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <next_process+0x244>)
 8000c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca0:	a343      	add	r3, pc, #268	; (adr r3, 8000db0 <next_process+0x238>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff fb09 	bl	80002bc <__adddf3>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4944      	ldr	r1, [pc, #272]	; (8000dc0 <next_process+0x248>)
 8000cb0:	e9c1 2300 	strd	r2, r3, [r1]
		menu_next = 20;
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <next_process+0x240>)
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	e077      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 20) {
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <next_process+0x240>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b14      	cmp	r3, #20
 8000cc2:	d120      	bne.n	8000d06 <next_process+0x18e>
		if (milis > menu_timeOut) {
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <next_process+0x244>)
 8000cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <next_process+0x248>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f7ff fd28 	bl	8000724 <__aeabi_dcmpgt>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <next_process+0x16a>
			menu_next = 21;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <next_process+0x240>)
 8000cdc:	2215      	movs	r2, #21
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	e064      	b.n	8000dac <next_process+0x234>
			if (btn_ok == 0) {
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <next_process+0x24c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d160      	bne.n	8000dac <next_process+0x234>
				menu1_next = 0;
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <next_process+0x258>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
				menu2_next = 1;
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <next_process+0x25c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
				menu3_next = 0;
 8000cf6:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <next_process+0x260>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
				menu_next = 1000;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <next_process+0x240>)
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	e052      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 21) {
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <next_process+0x240>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b15      	cmp	r3, #21
 8000d0c:	d119      	bne.n	8000d42 <next_process+0x1ca>
		lcd_clear();
 8000d0e:	f000 fff1 	bl	8001cf4 <lcd_clear>
		lcd_put_cur(0, 0);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f001 f804 	bl	8001d22 <lcd_put_cur>
		lcd_send_string("menu 3 ");
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <next_process+0x268>)
 8000d1c:	f001 f85d 	bl	8001dda <lcd_send_string>
		menu_timeOut = milis + 3000;
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <next_process+0x244>)
 8000d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d26:	a322      	add	r3, pc, #136	; (adr r3, 8000db0 <next_process+0x238>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fac6 	bl	80002bc <__adddf3>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <next_process+0x248>)
 8000d36:	e9c1 2300 	strd	r2, r3, [r1]
		menu_next = 30;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <next_process+0x240>)
 8000d3c:	221e      	movs	r2, #30
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	e034      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 30) {
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <next_process+0x240>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b1e      	cmp	r3, #30
 8000d48:	d120      	bne.n	8000d8c <next_process+0x214>
		if (milis > menu_timeOut) {
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <next_process+0x244>)
 8000d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <next_process+0x248>)
 8000d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d56:	f7ff fce5 	bl	8000724 <__aeabi_dcmpgt>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <next_process+0x1f0>
			menu_next = 31;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <next_process+0x240>)
 8000d62:	221f      	movs	r2, #31
 8000d64:	601a      	str	r2, [r3, #0]
}
 8000d66:	e021      	b.n	8000dac <next_process+0x234>
			if (btn_ok == 0) {
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <next_process+0x24c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d11d      	bne.n	8000dac <next_process+0x234>
				menu1_next = 0;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <next_process+0x258>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
				menu2_next = 0;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <next_process+0x25c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
				menu3_next = 1;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <next_process+0x260>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
				menu_next = 1000;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <next_process+0x240>)
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	e00f      	b.n	8000dac <next_process+0x234>
	} else if (menu_next == 31) {
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <next_process+0x240>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b1f      	cmp	r3, #31
 8000d92:	d10b      	bne.n	8000dac <next_process+0x234>
		lcd_clear();
 8000d94:	f000 ffae 	bl	8001cf4 <lcd_clear>
		lcd_put_cur(0, 0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 ffc1 	bl	8001d22 <lcd_put_cur>
		lcd_send_string("CIKIS");
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <next_process+0x26c>)
 8000da2:	f001 f81a 	bl	8001dda <lcd_send_string>
		menu_next = 32;
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <next_process+0x240>)
 8000da8:	2220      	movs	r2, #32
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	00000000 	.word	0x00000000
 8000db4:	40a77000 	.word	0x40a77000
 8000db8:	200001b8 	.word	0x200001b8
 8000dbc:	200001e0 	.word	0x200001e0
 8000dc0:	200001f0 	.word	0x200001f0
 8000dc4:	200001ac 	.word	0x200001ac
 8000dc8:	200001d4 	.word	0x200001d4
 8000dcc:	080046e4 	.word	0x080046e4
 8000dd0:	200001bc 	.word	0x200001bc
 8000dd4:	200001c0 	.word	0x200001c0
 8000dd8:	200001c4 	.word	0x200001c4
 8000ddc:	080046ec 	.word	0x080046ec
 8000de0:	080046f4 	.word	0x080046f4
 8000de4:	080046fc 	.word	0x080046fc

08000de8 <menu_process>:

void menu_process() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

	if (menu1_next == 1) {
 8000dec:	4ba2      	ldr	r3, [pc, #648]	; (8001078 <menu_process+0x290>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d125      	bne.n	8000e40 <menu_process+0x58>
		menu1_index = 1;
 8000df4:	4ba1      	ldr	r3, [pc, #644]	; (800107c <menu_process+0x294>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000dfa:	f000 ff7b 	bl	8001cf4 <lcd_clear>

		value_ptr = (char*) &Ayar_Menu;
 8000dfe:	4ba0      	ldr	r3, [pc, #640]	; (8001080 <menu_process+0x298>)
 8000e00:	4aa0      	ldr	r2, [pc, #640]	; (8001084 <menu_process+0x29c>)
 8000e02:	601a      	str	r2, [r3, #0]
		lcd_put_cur(0, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 ff8b 	bl	8001d22 <lcd_put_cur>
		lcd_send_string((Ayar_Menu_String[menu1_index]));
 8000e0c:	4b9b      	ldr	r3, [pc, #620]	; (800107c <menu_process+0x294>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4a9d      	ldr	r2, [pc, #628]	; (8001088 <menu_process+0x2a0>)
 8000e14:	4413      	add	r3, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ffdf 	bl	8001dda <lcd_send_string>
		lcd_put_cur(1, 0);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 ff7f 	bl	8001d22 <lcd_put_cur>
		lcd_send_int(*(value_ptr + menu1_index));
 8000e24:	4b96      	ldr	r3, [pc, #600]	; (8001080 <menu_process+0x298>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b94      	ldr	r3, [pc, #592]	; (800107c <menu_process+0x294>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 ffe6 	bl	8001e04 <lcd_send_int>
		menu1_next = 2;
 8000e38:	4b8f      	ldr	r3, [pc, #572]	; (8001078 <menu_process+0x290>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e1e4      	b.n	800120a <menu_process+0x422>
	} else if (menu1_next == 2) { //menü ana sayfa döngü
 8000e40:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <menu_process+0x290>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d16d      	bne.n	8000f24 <menu_process+0x13c>

		if (btn_up == 1) {
 8000e48:	4b90      	ldr	r3, [pc, #576]	; (800108c <menu_process+0x2a4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d12e      	bne.n	8000eae <menu_process+0xc6>
			if (menu1_index < *value_ptr) {
 8000e50:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <menu_process+0x298>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b89      	ldr	r3, [pc, #548]	; (800107c <menu_process+0x294>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dd05      	ble.n	8000e6a <menu_process+0x82>
				menu1_index++;
 8000e5e:	4b87      	ldr	r3, [pc, #540]	; (800107c <menu_process+0x294>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a85      	ldr	r2, [pc, #532]	; (800107c <menu_process+0x294>)
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e002      	b.n	8000e70 <menu_process+0x88>
			} else {
				menu1_index = 1;
 8000e6a:	4b84      	ldr	r3, [pc, #528]	; (800107c <menu_process+0x294>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
			}
			lcd_clear();
 8000e70:	f000 ff40 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 ff53 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Ayar_Menu_String[menu1_index]));
 8000e7c:	4b7f      	ldr	r3, [pc, #508]	; (800107c <menu_process+0x294>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4a81      	ldr	r2, [pc, #516]	; (8001088 <menu_process+0x2a0>)
 8000e84:	4413      	add	r3, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 ffa7 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 ff47 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + (menu1_index)));
 8000e94:	4b7a      	ldr	r3, [pc, #488]	; (8001080 <menu_process+0x298>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b78      	ldr	r3, [pc, #480]	; (800107c <menu_process+0x294>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 ffae 	bl	8001e04 <lcd_send_int>
			btn_up = 0;
 8000ea8:	4b78      	ldr	r3, [pc, #480]	; (800108c <menu_process+0x2a4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		}
		if (btn_dwn == 1) {
 8000eae:	4b78      	ldr	r3, [pc, #480]	; (8001090 <menu_process+0x2a8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d12d      	bne.n	8000f12 <menu_process+0x12a>
			if (menu1_index > 1) {
 8000eb6:	4b71      	ldr	r3, [pc, #452]	; (800107c <menu_process+0x294>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	dd05      	ble.n	8000eca <menu_process+0xe2>
				menu1_index--;
 8000ebe:	4b6f      	ldr	r3, [pc, #444]	; (800107c <menu_process+0x294>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a6d      	ldr	r2, [pc, #436]	; (800107c <menu_process+0x294>)
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e004      	b.n	8000ed4 <menu_process+0xec>
			} else {
				menu1_index = *value_ptr;
 8000eca:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <menu_process+0x298>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6a      	ldr	r2, [pc, #424]	; (800107c <menu_process+0x294>)
 8000ed2:	6013      	str	r3, [r2, #0]
			}
			lcd_clear();
 8000ed4:	f000 ff0e 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 ff21 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Ayar_Menu_String[menu1_index]));
 8000ee0:	4b66      	ldr	r3, [pc, #408]	; (800107c <menu_process+0x294>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	4a68      	ldr	r2, [pc, #416]	; (8001088 <menu_process+0x2a0>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 ff75 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 ff15 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu1_index));
 8000ef8:	4b61      	ldr	r3, [pc, #388]	; (8001080 <menu_process+0x298>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b5f      	ldr	r3, [pc, #380]	; (800107c <menu_process+0x294>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff7c 	bl	8001e04 <lcd_send_int>
			btn_dwn = 0;
 8000f0c:	4b60      	ldr	r3, [pc, #384]	; (8001090 <menu_process+0x2a8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
		}

		if (btn_ok == 1) { //menudeyken ok tuşuna basılırsa değer yan sön yapacak
 8000f12:	4b60      	ldr	r3, [pc, #384]	; (8001094 <menu_process+0x2ac>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	f040 8177 	bne.w	800120a <menu_process+0x422>
			menu1_next = 3;
 8000f1c:	4b56      	ldr	r3, [pc, #344]	; (8001078 <menu_process+0x290>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e172      	b.n	800120a <menu_process+0x422>
		}

	} else if (menu1_next == 3) {
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <menu_process+0x290>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d160      	bne.n	8000fee <menu_process+0x206>
		if (btn_ok == 0) { //butondan çekildiğinde
 8000f2c:	4b59      	ldr	r3, [pc, #356]	; (8001094 <menu_process+0x2ac>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d108      	bne.n	8000f46 <menu_process+0x15e>
			menu1_next = 4;
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <menu_process+0x290>)
 8000f36:	2204      	movs	r2, #4
 8000f38:	601a      	str	r2, [r3, #0]
			up_dwn_ratio = 250;
 8000f3a:	4957      	ldr	r1, [pc, #348]	; (8001098 <menu_process+0x2b0>)
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b56      	ldr	r3, [pc, #344]	; (800109c <menu_process+0x2b4>)
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (milis > but_timeOut + 300) {
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <menu_process+0x2b8>)
 8000f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4c:	a346      	add	r3, pc, #280	; (adr r3, 8001068 <menu_process+0x280>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff f9b3 	bl	80002bc <__adddf3>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <menu_process+0x2bc>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fbc0 	bl	80006e8 <__aeabi_dcmplt>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d022      	beq.n	8000fb4 <menu_process+0x1cc>
			but_timeOut = milis;
 8000f6e:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <menu_process+0x2bc>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	494a      	ldr	r1, [pc, #296]	; (80010a0 <menu_process+0x2b8>)
 8000f76:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 8000f7a:	f000 febb 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fece 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Ayar_Menu_String[menu1_index]));
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <menu_process+0x294>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <menu_process+0x2a0>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 ff22 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fec2 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu1_index));
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <menu_process+0x298>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <menu_process+0x294>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 ff29 	bl	8001e04 <lcd_send_int>
 8000fb2:	e12a      	b.n	800120a <menu_process+0x422>
		} else if (milis > but_timeOut + 150) {
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <menu_process+0x2b8>)
 8000fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fba:	a32d      	add	r3, pc, #180	; (adr r3, 8001070 <menu_process+0x288>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f97c 	bl	80002bc <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <menu_process+0x2bc>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb89 	bl	80006e8 <__aeabi_dcmplt>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8116 	beq.w	800120a <menu_process+0x422>

			lcd_put_cur(1, 0);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 fe9e 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 8000fe6:	4830      	ldr	r0, [pc, #192]	; (80010a8 <menu_process+0x2c0>)
 8000fe8:	f000 fef7 	bl	8001dda <lcd_send_string>
 8000fec:	e10d      	b.n	800120a <menu_process+0x422>
		}
	} else if (menu1_next == 4) { //Değer değiştrime işlemi
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <menu_process+0x290>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	f040 8109 	bne.w	800120a <menu_process+0x422>
		if (milis > but_timeOut + 300) {
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <menu_process+0x2b8>)
 8000ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffe:	a31a      	add	r3, pc, #104	; (adr r3, 8001068 <menu_process+0x280>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff f95a 	bl	80002bc <__adddf3>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <menu_process+0x2bc>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fb67 	bl	80006e8 <__aeabi_dcmplt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d045      	beq.n	80010ac <menu_process+0x2c4>
			but_timeOut = milis;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <menu_process+0x2bc>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	491e      	ldr	r1, [pc, #120]	; (80010a0 <menu_process+0x2b8>)
 8001028:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 800102c:	f000 fe62 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f000 fe75 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Ayar_Menu_String[menu1_index]));
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <menu_process+0x294>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <menu_process+0x2a0>)
 8001040:	4413      	add	r3, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fec9 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8001048:	2100      	movs	r1, #0
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fe69 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu1_index));
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <menu_process+0x298>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <menu_process+0x294>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fed0 	bl	8001e04 <lcd_send_int>
 8001064:	e03d      	b.n	80010e2 <menu_process+0x2fa>
 8001066:	bf00      	nop
 8001068:	00000000 	.word	0x00000000
 800106c:	4072c000 	.word	0x4072c000
 8001070:	00000000 	.word	0x00000000
 8001074:	4062c000 	.word	0x4062c000
 8001078:	200001bc 	.word	0x200001bc
 800107c:	200001c8 	.word	0x200001c8
 8001080:	200001f8 	.word	0x200001f8
 8001084:	2000016c 	.word	0x2000016c
 8001088:	20000000 	.word	0x20000000
 800108c:	200001b0 	.word	0x200001b0
 8001090:	200001b4 	.word	0x200001b4
 8001094:	200001ac 	.word	0x200001ac
 8001098:	20000200 	.word	0x20000200
 800109c:	406f4000 	.word	0x406f4000
 80010a0:	200001e8 	.word	0x200001e8
 80010a4:	200001e0 	.word	0x200001e0
 80010a8:	08004704 	.word	0x08004704
		} else if (milis > but_timeOut + 150) {
 80010ac:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <menu_process+0x510>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	a38f      	add	r3, pc, #572	; (adr r3, 80012f0 <menu_process+0x508>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f900 	bl	80002bc <__adddf3>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	4b8d      	ldr	r3, [pc, #564]	; (80012fc <menu_process+0x514>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fb0d 	bl	80006e8 <__aeabi_dcmplt>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <menu_process+0x2fa>

			lcd_put_cur(1, 0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fe23 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 80010dc:	4888      	ldr	r0, [pc, #544]	; (8001300 <menu_process+0x518>)
 80010de:	f000 fe7c 	bl	8001dda <lcd_send_string>
		}
		if (btn_up == 1) {
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <menu_process+0x51c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d13b      	bne.n	8001162 <menu_process+0x37a>
			if (*(value_ptr + menu1_index) < 1000) {
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <menu_process+0x520>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b87      	ldr	r3, [pc, #540]	; (800130c <menu_process+0x524>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fc:	da31      	bge.n	8001162 <menu_process+0x37a>
				*(value_ptr + menu1_index) = *(value_ptr + menu1_index) + 1;
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <menu_process+0x520>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <menu_process+0x524>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b7e      	ldr	r3, [pc, #504]	; (8001308 <menu_process+0x520>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	4b7e      	ldr	r3, [pc, #504]	; (800130c <menu_process+0x524>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3201      	adds	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 800111c:	4b7c      	ldr	r3, [pc, #496]	; (8001310 <menu_process+0x528>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fb07 	bl	8000738 <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	4618      	mov	r0, r3
 800112e:	f001 f903 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 8001132:	4b77      	ldr	r3, [pc, #476]	; (8001310 <menu_process+0x528>)
 8001134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <menu_process+0x52c>)
 800113e:	f7ff faf1 	bl	8000724 <__aeabi_dcmpgt>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00c      	beq.n	8001162 <menu_process+0x37a>
					up_dwn_ratio = up_dwn_ratio - 10;
 8001148:	4b71      	ldr	r3, [pc, #452]	; (8001310 <menu_process+0x528>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b70      	ldr	r3, [pc, #448]	; (8001314 <menu_process+0x52c>)
 8001154:	f7ff f8b0 	bl	80002b8 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	496c      	ldr	r1, [pc, #432]	; (8001310 <menu_process+0x528>)
 800115e:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

		}
		if (btn_dwn == 1) {
 8001162:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <menu_process+0x530>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d13a      	bne.n	80011e0 <menu_process+0x3f8>
			if (*(value_ptr + menu1_index) > 0) {
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <menu_process+0x520>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <menu_process+0x524>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd31      	ble.n	80011e0 <menu_process+0x3f8>
				*(value_ptr + menu1_index) = *(value_ptr + menu1_index) - 1;
 800117c:	4b62      	ldr	r3, [pc, #392]	; (8001308 <menu_process+0x520>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b62      	ldr	r3, [pc, #392]	; (800130c <menu_process+0x524>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <menu_process+0x520>)
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <menu_process+0x524>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3a01      	subs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <menu_process+0x528>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fac8 	bl	8000738 <__aeabi_d2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f8c4 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <menu_process+0x528>)
 80011b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b56      	ldr	r3, [pc, #344]	; (8001314 <menu_process+0x52c>)
 80011bc:	f7ff fab2 	bl	8000724 <__aeabi_dcmpgt>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <menu_process+0x3f8>
					up_dwn_ratio = up_dwn_ratio - 10;
 80011c6:	4b52      	ldr	r3, [pc, #328]	; (8001310 <menu_process+0x528>)
 80011c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <menu_process+0x52c>)
 80011d2:	f7ff f871 	bl	80002b8 <__aeabi_dsub>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	494d      	ldr	r1, [pc, #308]	; (8001310 <menu_process+0x528>)
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
		if (btn_dwn == 0 && btn_up == 0) {
 80011e0:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <menu_process+0x530>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d109      	bne.n	80011fc <menu_process+0x414>
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <menu_process+0x51c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <menu_process+0x414>
			up_dwn_ratio = 250;
 80011f0:	4947      	ldr	r1, [pc, #284]	; (8001310 <menu_process+0x528>)
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <menu_process+0x534>)
 80011f8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (btn_ok == 1) {
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <menu_process+0x538>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <menu_process+0x422>

			menu1_next = 2;
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <menu_process+0x53c>)
 8001206:	2202      	movs	r2, #2
 8001208:	601a      	str	r2, [r3, #0]
		}

	}

	/*MENU 2*/
	if (menu2_next == 1) {
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <menu_process+0x540>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d125      	bne.n	800125e <menu_process+0x476>
		menu2_index = 1;
 8001212:	4b46      	ldr	r3, [pc, #280]	; (800132c <menu_process+0x544>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8001218:	f000 fd6c 	bl	8001cf4 <lcd_clear>

		value_ptr = (char*) &Servis_Menu;
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <menu_process+0x520>)
 800121e:	4a44      	ldr	r2, [pc, #272]	; (8001330 <menu_process+0x548>)
 8001220:	601a      	str	r2, [r3, #0]
		lcd_put_cur(0, 0);
 8001222:	2100      	movs	r1, #0
 8001224:	2000      	movs	r0, #0
 8001226:	f000 fd7c 	bl	8001d22 <lcd_put_cur>
		lcd_send_string((Servis_Menu_String[menu2_index]));
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <menu_process+0x544>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4a40      	ldr	r2, [pc, #256]	; (8001334 <menu_process+0x54c>)
 8001232:	4413      	add	r3, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fdd0 	bl	8001dda <lcd_send_string>
		lcd_put_cur(1, 0);
 800123a:	2100      	movs	r1, #0
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fd70 	bl	8001d22 <lcd_put_cur>
		lcd_send_int(*(value_ptr + menu2_index));
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <menu_process+0x520>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <menu_process+0x544>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fdd7 	bl	8001e04 <lcd_send_int>
		menu2_next = 2;
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <menu_process+0x540>)
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e209      	b.n	8001672 <menu_process+0x88a>
	} else if (menu2_next == 2) { //menü ana sayfa döngü
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <menu_process+0x540>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	f040 8095 	bne.w	8001392 <menu_process+0x5aa>

		if (btn_up == 1) {
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <menu_process+0x51c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d12e      	bne.n	80012ce <menu_process+0x4e6>
			if (menu2_index < *value_ptr) {
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <menu_process+0x520>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <menu_process+0x544>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	dd05      	ble.n	800128a <menu_process+0x4a2>
				menu2_index++;
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <menu_process+0x544>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <menu_process+0x544>)
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e002      	b.n	8001290 <menu_process+0x4a8>
			} else {
				menu2_index = 1;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <menu_process+0x544>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
			}
			lcd_clear();
 8001290:	f000 fd30 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8001294:	2100      	movs	r1, #0
 8001296:	2000      	movs	r0, #0
 8001298:	f000 fd43 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Servis_Menu_String[menu2_index]));
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <menu_process+0x544>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4a24      	ldr	r2, [pc, #144]	; (8001334 <menu_process+0x54c>)
 80012a4:	4413      	add	r3, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd97 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fd37 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + (menu2_index)));
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <menu_process+0x520>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <menu_process+0x544>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd9e 	bl	8001e04 <lcd_send_int>
			btn_up = 0;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <menu_process+0x51c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		}
		if (btn_dwn == 1) {
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <menu_process+0x530>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d154      	bne.n	8001380 <menu_process+0x598>
			if (menu2_index > 1) {
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <menu_process+0x544>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	dd2c      	ble.n	8001338 <menu_process+0x550>
				menu2_index--;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <menu_process+0x544>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <menu_process+0x544>)
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02b      	b.n	8001342 <menu_process+0x55a>
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	00000000 	.word	0x00000000
 80012f4:	4062c000 	.word	0x4062c000
 80012f8:	200001e8 	.word	0x200001e8
 80012fc:	200001e0 	.word	0x200001e0
 8001300:	08004704 	.word	0x08004704
 8001304:	200001b0 	.word	0x200001b0
 8001308:	200001f8 	.word	0x200001f8
 800130c:	200001c8 	.word	0x200001c8
 8001310:	20000200 	.word	0x20000200
 8001314:	40240000 	.word	0x40240000
 8001318:	200001b4 	.word	0x200001b4
 800131c:	406f4000 	.word	0x406f4000
 8001320:	200001ac 	.word	0x200001ac
 8001324:	200001bc 	.word	0x200001bc
 8001328:	200001c0 	.word	0x200001c0
 800132c:	200001cc 	.word	0x200001cc
 8001330:	20000184 	.word	0x20000184
 8001334:	20000060 	.word	0x20000060
			} else {
				menu2_index = *value_ptr;
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <menu_process+0x700>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6b      	ldr	r2, [pc, #428]	; (80014ec <menu_process+0x704>)
 8001340:	6013      	str	r3, [r2, #0]
			}
			lcd_clear();
 8001342:	f000 fcd7 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f000 fcea 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Servis_Menu_String[menu2_index]));
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <menu_process+0x704>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4a66      	ldr	r2, [pc, #408]	; (80014f0 <menu_process+0x708>)
 8001356:	4413      	add	r3, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fd3e 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2001      	movs	r0, #1
 8001362:	f000 fcde 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu2_index));
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <menu_process+0x700>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b60      	ldr	r3, [pc, #384]	; (80014ec <menu_process+0x704>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fd45 	bl	8001e04 <lcd_send_int>
			btn_dwn = 0;
 800137a:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <menu_process+0x70c>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
		}

		if (btn_ok == 1) { //menudeyken ok tuşuna basılırsa değer yan sön yapacak
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <menu_process+0x710>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	f040 8174 	bne.w	8001672 <menu_process+0x88a>
			menu2_next = 3;
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <menu_process+0x714>)
 800138c:	2203      	movs	r2, #3
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e16f      	b.n	8001672 <menu_process+0x88a>
		}

	} else if (menu2_next == 3) {
 8001392:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <menu_process+0x714>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d160      	bne.n	800145c <menu_process+0x674>
		if (btn_ok == 0) { //butondan çekildiğinde
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <menu_process+0x710>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <menu_process+0x5cc>
			menu2_next = 4;
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <menu_process+0x714>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	601a      	str	r2, [r3, #0]
			up_dwn_ratio = 250;
 80013a8:	4955      	ldr	r1, [pc, #340]	; (8001500 <menu_process+0x718>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b55      	ldr	r3, [pc, #340]	; (8001504 <menu_process+0x71c>)
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (milis > but_timeOut + 300) {
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <menu_process+0x720>)
 80013b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ba:	a347      	add	r3, pc, #284	; (adr r3, 80014d8 <menu_process+0x6f0>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7fe ff7c 	bl	80002bc <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <menu_process+0x724>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f989 	bl	80006e8 <__aeabi_dcmplt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d022      	beq.n	8001422 <menu_process+0x63a>
			but_timeOut = milis;
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <menu_process+0x724>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	4949      	ldr	r1, [pc, #292]	; (8001508 <menu_process+0x720>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 80013e8:	f000 fc84 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 fc97 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Servis_Menu_String[menu2_index]));
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <menu_process+0x704>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <menu_process+0x708>)
 80013fc:	4413      	add	r3, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fceb 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8001404:	2100      	movs	r1, #0
 8001406:	2001      	movs	r0, #1
 8001408:	f000 fc8b 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu2_index));
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <menu_process+0x700>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <menu_process+0x704>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fcf2 	bl	8001e04 <lcd_send_int>
 8001420:	e127      	b.n	8001672 <menu_process+0x88a>
		} else if (milis > but_timeOut + 150) {
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <menu_process+0x720>)
 8001424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001428:	a32d      	add	r3, pc, #180	; (adr r3, 80014e0 <menu_process+0x6f8>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7fe ff45 	bl	80002bc <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <menu_process+0x724>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f952 	bl	80006e8 <__aeabi_dcmplt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8113 	beq.w	8001672 <menu_process+0x88a>

			lcd_put_cur(1, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fc67 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 8001454:	482e      	ldr	r0, [pc, #184]	; (8001510 <menu_process+0x728>)
 8001456:	f000 fcc0 	bl	8001dda <lcd_send_string>
 800145a:	e10a      	b.n	8001672 <menu_process+0x88a>
		}
	} else if (menu2_next == 4) { //Değer değiştrime işlemi
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <menu_process+0x714>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b04      	cmp	r3, #4
 8001462:	f040 8106 	bne.w	8001672 <menu_process+0x88a>
		if (milis > but_timeOut + 300) {
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <menu_process+0x720>)
 8001468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146c:	a31a      	add	r3, pc, #104	; (adr r3, 80014d8 <menu_process+0x6f0>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7fe ff23 	bl	80002bc <__adddf3>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <menu_process+0x724>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f930 	bl	80006e8 <__aeabi_dcmplt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d042      	beq.n	8001514 <menu_process+0x72c>
			but_timeOut = milis;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <menu_process+0x724>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	491c      	ldr	r1, [pc, #112]	; (8001508 <menu_process+0x720>)
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 800149a:	f000 fc2b 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 800149e:	2100      	movs	r1, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 fc3e 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Servis_Menu_String[menu2_index]));
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <menu_process+0x704>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <menu_process+0x708>)
 80014ae:	4413      	add	r3, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fc92 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 fc32 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu2_index));
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <menu_process+0x700>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <menu_process+0x704>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fc99 	bl	8001e04 <lcd_send_int>
 80014d2:	e03a      	b.n	800154a <menu_process+0x762>
 80014d4:	f3af 8000 	nop.w
 80014d8:	00000000 	.word	0x00000000
 80014dc:	4072c000 	.word	0x4072c000
 80014e0:	00000000 	.word	0x00000000
 80014e4:	4062c000 	.word	0x4062c000
 80014e8:	200001f8 	.word	0x200001f8
 80014ec:	200001cc 	.word	0x200001cc
 80014f0:	20000060 	.word	0x20000060
 80014f4:	200001b4 	.word	0x200001b4
 80014f8:	200001ac 	.word	0x200001ac
 80014fc:	200001c0 	.word	0x200001c0
 8001500:	20000200 	.word	0x20000200
 8001504:	406f4000 	.word	0x406f4000
 8001508:	200001e8 	.word	0x200001e8
 800150c:	200001e0 	.word	0x200001e0
 8001510:	08004704 	.word	0x08004704
		} else if (milis > but_timeOut + 150) {
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <menu_process+0x978>)
 8001516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151a:	a38f      	add	r3, pc, #572	; (adr r3, 8001758 <menu_process+0x970>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe fecc 	bl	80002bc <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	4b8d      	ldr	r3, [pc, #564]	; (8001764 <menu_process+0x97c>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f8d9 	bl	80006e8 <__aeabi_dcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <menu_process+0x762>

			lcd_put_cur(1, 0);
 800153c:	2100      	movs	r1, #0
 800153e:	2001      	movs	r0, #1
 8001540:	f000 fbef 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 8001544:	4888      	ldr	r0, [pc, #544]	; (8001768 <menu_process+0x980>)
 8001546:	f000 fc48 	bl	8001dda <lcd_send_string>
		}
		if (btn_up == 1) {
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <menu_process+0x984>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d13b      	bne.n	80015ca <menu_process+0x7e2>
			if (*(value_ptr + menu2_index) < 1000) {
 8001552:	4b87      	ldr	r3, [pc, #540]	; (8001770 <menu_process+0x988>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b87      	ldr	r3, [pc, #540]	; (8001774 <menu_process+0x98c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001564:	da31      	bge.n	80015ca <menu_process+0x7e2>
				*(value_ptr + menu2_index) = *(value_ptr + menu2_index) + 1;
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <menu_process+0x988>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b82      	ldr	r3, [pc, #520]	; (8001774 <menu_process+0x98c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b7e      	ldr	r3, [pc, #504]	; (8001770 <menu_process+0x988>)
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	4b7e      	ldr	r3, [pc, #504]	; (8001774 <menu_process+0x98c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3201      	adds	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 8001584:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <menu_process+0x990>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff f8d3 	bl	8000738 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fecf 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 800159a:	4b77      	ldr	r3, [pc, #476]	; (8001778 <menu_process+0x990>)
 800159c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b75      	ldr	r3, [pc, #468]	; (800177c <menu_process+0x994>)
 80015a6:	f7ff f8bd 	bl	8000724 <__aeabi_dcmpgt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <menu_process+0x7e2>
					up_dwn_ratio = up_dwn_ratio - 10;
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <menu_process+0x990>)
 80015b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b70      	ldr	r3, [pc, #448]	; (800177c <menu_process+0x994>)
 80015bc:	f7fe fe7c 	bl	80002b8 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	496c      	ldr	r1, [pc, #432]	; (8001778 <menu_process+0x990>)
 80015c6:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

		}
		if (btn_dwn == 1) {
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <menu_process+0x998>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d13a      	bne.n	8001648 <menu_process+0x860>
			if (*(value_ptr + menu2_index) > 0) {
 80015d2:	4b67      	ldr	r3, [pc, #412]	; (8001770 <menu_process+0x988>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <menu_process+0x98c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd31      	ble.n	8001648 <menu_process+0x860>
				*(value_ptr + menu2_index) = *(value_ptr + menu2_index) - 1;
 80015e4:	4b62      	ldr	r3, [pc, #392]	; (8001770 <menu_process+0x988>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b62      	ldr	r3, [pc, #392]	; (8001774 <menu_process+0x98c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <menu_process+0x988>)
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <menu_process+0x98c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3a01      	subs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <menu_process+0x990>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff f894 	bl	8000738 <__aeabi_d2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fe90 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <menu_process+0x990>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <menu_process+0x994>)
 8001624:	f7ff f87e 	bl	8000724 <__aeabi_dcmpgt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <menu_process+0x860>
					up_dwn_ratio = up_dwn_ratio - 10;
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <menu_process+0x990>)
 8001630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <menu_process+0x994>)
 800163a:	f7fe fe3d 	bl	80002b8 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	494d      	ldr	r1, [pc, #308]	; (8001778 <menu_process+0x990>)
 8001644:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
		if (btn_dwn == 0 && btn_up == 0) {
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <menu_process+0x998>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <menu_process+0x87c>
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <menu_process+0x984>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <menu_process+0x87c>
			up_dwn_ratio = 250;
 8001658:	4947      	ldr	r1, [pc, #284]	; (8001778 <menu_process+0x990>)
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <menu_process+0x99c>)
 8001660:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (btn_ok == 1) {
 8001664:	4b48      	ldr	r3, [pc, #288]	; (8001788 <menu_process+0x9a0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <menu_process+0x88a>

			menu2_next = 2;
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <menu_process+0x9a4>)
 800166e:	2202      	movs	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
		}

	}

	/*MENU 3*/
	if (menu3_next == 1) {
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <menu_process+0x9a8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d125      	bne.n	80016c6 <menu_process+0x8de>
		menu3_index = 1;
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <menu_process+0x9ac>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8001680:	f000 fb38 	bl	8001cf4 <lcd_clear>

		value_ptr = (char*) &Kalibrasyon_Menu;
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <menu_process+0x988>)
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <menu_process+0x9b0>)
 8001688:	601a      	str	r2, [r3, #0]
		lcd_put_cur(0, 0);
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f000 fb48 	bl	8001d22 <lcd_put_cur>
		lcd_send_string((Kalibrasyon_Menu_String[menu3_index]));
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <menu_process+0x9ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4a40      	ldr	r2, [pc, #256]	; (800179c <menu_process+0x9b4>)
 800169a:	4413      	add	r3, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb9c 	bl	8001dda <lcd_send_string>
		lcd_put_cur(1, 0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 fb3c 	bl	8001d22 <lcd_put_cur>
		lcd_send_int(*(value_ptr + menu3_index));
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <menu_process+0x988>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <menu_process+0x9ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fba3 	bl	8001e04 <lcd_send_int>
		menu3_next = 2;
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <menu_process+0x9a8>)
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e209      	b.n	8001ada <menu_process+0xcf2>
	} else if (menu3_next == 2) { //menü ana sayfa döngü
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <menu_process+0x9a8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	f040 8095 	bne.w	80017fa <menu_process+0xa12>

		if (btn_up == 1) {
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <menu_process+0x984>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d12e      	bne.n	8001736 <menu_process+0x94e>
			if (menu3_index < *value_ptr) {
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <menu_process+0x988>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <menu_process+0x9ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dd05      	ble.n	80016f2 <menu_process+0x90a>
				menu3_index++;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <menu_process+0x9ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <menu_process+0x9ac>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e002      	b.n	80016f8 <menu_process+0x910>
			} else {
				menu3_index = 1;
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <menu_process+0x9ac>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
			}
			lcd_clear();
 80016f8:	f000 fafc 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 fb0f 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Kalibrasyon_Menu_String[menu3_index]));
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <menu_process+0x9ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <menu_process+0x9b4>)
 800170c:	4413      	add	r3, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fb63 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	2001      	movs	r0, #1
 8001718:	f000 fb03 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + (menu3_index)));
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <menu_process+0x988>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <menu_process+0x9ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fb6a 	bl	8001e04 <lcd_send_int>
			btn_up = 0;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <menu_process+0x984>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
		}
		if (btn_dwn == 1) {
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <menu_process+0x998>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d154      	bne.n	80017e8 <menu_process+0xa00>
			if (menu3_index > 1) {
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <menu_process+0x9ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	dd2c      	ble.n	80017a0 <menu_process+0x9b8>
				menu3_index--;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <menu_process+0x9ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <menu_process+0x9ac>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e02b      	b.n	80017aa <menu_process+0x9c2>
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	00000000 	.word	0x00000000
 800175c:	4062c000 	.word	0x4062c000
 8001760:	200001e8 	.word	0x200001e8
 8001764:	200001e0 	.word	0x200001e0
 8001768:	08004704 	.word	0x08004704
 800176c:	200001b0 	.word	0x200001b0
 8001770:	200001f8 	.word	0x200001f8
 8001774:	200001cc 	.word	0x200001cc
 8001778:	20000200 	.word	0x20000200
 800177c:	40240000 	.word	0x40240000
 8001780:	200001b4 	.word	0x200001b4
 8001784:	406f4000 	.word	0x406f4000
 8001788:	200001ac 	.word	0x200001ac
 800178c:	200001c0 	.word	0x200001c0
 8001790:	200001c4 	.word	0x200001c4
 8001794:	200001d0 	.word	0x200001d0
 8001798:	20000194 	.word	0x20000194
 800179c:	200000a0 	.word	0x200000a0
			} else {
				menu3_index = *value_ptr;
 80017a0:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <menu_process+0xb68>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6b      	ldr	r2, [pc, #428]	; (8001954 <menu_process+0xb6c>)
 80017a8:	6013      	str	r3, [r2, #0]
			}
			lcd_clear();
 80017aa:	f000 faa3 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 80017ae:	2100      	movs	r1, #0
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 fab6 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Kalibrasyon_Menu_String[menu3_index]));
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <menu_process+0xb6c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4a66      	ldr	r2, [pc, #408]	; (8001958 <menu_process+0xb70>)
 80017be:	4413      	add	r3, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fb0a 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2001      	movs	r0, #1
 80017ca:	f000 faaa 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu3_index));
 80017ce:	4b60      	ldr	r3, [pc, #384]	; (8001950 <menu_process+0xb68>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <menu_process+0xb6c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fb11 	bl	8001e04 <lcd_send_int>
			btn_dwn = 0;
 80017e2:	4b5e      	ldr	r3, [pc, #376]	; (800195c <menu_process+0xb74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
		}

		if (btn_ok == 1) { //menudeyken ok tuşuna basılırsa değer yan sön yapacak
 80017e8:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <menu_process+0xb78>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f040 8174 	bne.w	8001ada <menu_process+0xcf2>
			menu3_next = 3;
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <menu_process+0xb7c>)
 80017f4:	2203      	movs	r2, #3
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e16f      	b.n	8001ada <menu_process+0xcf2>
		}

	} else if (menu3_next == 3) {
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <menu_process+0xb7c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d160      	bne.n	80018c4 <menu_process+0xadc>
		if (btn_ok == 0) { //butondan çekildiğinde
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <menu_process+0xb78>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d108      	bne.n	800181c <menu_process+0xa34>
			menu3_next = 4;
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <menu_process+0xb7c>)
 800180c:	2204      	movs	r2, #4
 800180e:	601a      	str	r2, [r3, #0]
			up_dwn_ratio = 250;
 8001810:	4955      	ldr	r1, [pc, #340]	; (8001968 <menu_process+0xb80>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b55      	ldr	r3, [pc, #340]	; (800196c <menu_process+0xb84>)
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (milis > but_timeOut + 300) {
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <menu_process+0xb88>)
 800181e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001822:	a347      	add	r3, pc, #284	; (adr r3, 8001940 <menu_process+0xb58>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fd48 	bl	80002bc <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <menu_process+0xb8c>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe ff55 	bl	80006e8 <__aeabi_dcmplt>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d022      	beq.n	800188a <menu_process+0xaa2>
			but_timeOut = milis;
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <menu_process+0xb8c>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	4949      	ldr	r1, [pc, #292]	; (8001970 <menu_process+0xb88>)
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 8001850:	f000 fa50 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f000 fa63 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Kalibrasyon_Menu_String[menu3_index]));
 800185c:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <menu_process+0xb6c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4a3d      	ldr	r2, [pc, #244]	; (8001958 <menu_process+0xb70>)
 8001864:	4413      	add	r3, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fab7 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 800186c:	2100      	movs	r1, #0
 800186e:	2001      	movs	r0, #1
 8001870:	f000 fa57 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu3_index));
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <menu_process+0xb68>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <menu_process+0xb6c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fabe 	bl	8001e04 <lcd_send_int>
 8001888:	e127      	b.n	8001ada <menu_process+0xcf2>
		} else if (milis > but_timeOut + 150) {
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <menu_process+0xb88>)
 800188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001890:	a32d      	add	r3, pc, #180	; (adr r3, 8001948 <menu_process+0xb60>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fd11 	bl	80002bc <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <menu_process+0xb8c>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe ff1e 	bl	80006e8 <__aeabi_dcmplt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8113 	beq.w	8001ada <menu_process+0xcf2>

			lcd_put_cur(1, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 fa33 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 80018bc:	482e      	ldr	r0, [pc, #184]	; (8001978 <menu_process+0xb90>)
 80018be:	f000 fa8c 	bl	8001dda <lcd_send_string>
 80018c2:	e10a      	b.n	8001ada <menu_process+0xcf2>
		}
	} else if (menu3_next == 4) { //Değer değiştrime işlemi
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <menu_process+0xb7c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	f040 8106 	bne.w	8001ada <menu_process+0xcf2>
		if (milis > but_timeOut + 300) {
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <menu_process+0xb88>)
 80018d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d4:	a31a      	add	r3, pc, #104	; (adr r3, 8001940 <menu_process+0xb58>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fcef 	bl	80002bc <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <menu_process+0xb8c>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fefc 	bl	80006e8 <__aeabi_dcmplt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d042      	beq.n	800197c <menu_process+0xb94>
			but_timeOut = milis;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <menu_process+0xb8c>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	491c      	ldr	r1, [pc, #112]	; (8001970 <menu_process+0xb88>)
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 8001902:	f000 f9f7 	bl	8001cf4 <lcd_clear>
			lcd_put_cur(0, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	2000      	movs	r0, #0
 800190a:	f000 fa0a 	bl	8001d22 <lcd_put_cur>
			lcd_send_string((Kalibrasyon_Menu_String[menu3_index]));
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <menu_process+0xb6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4a10      	ldr	r2, [pc, #64]	; (8001958 <menu_process+0xb70>)
 8001916:	4413      	add	r3, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fa5e 	bl	8001dda <lcd_send_string>
			lcd_put_cur(1, 0);
 800191e:	2100      	movs	r1, #0
 8001920:	2001      	movs	r0, #1
 8001922:	f000 f9fe 	bl	8001d22 <lcd_put_cur>
			lcd_send_int(*(value_ptr + menu3_index));
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <menu_process+0xb68>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <menu_process+0xb6c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fa65 	bl	8001e04 <lcd_send_int>
 800193a:	e03a      	b.n	80019b2 <menu_process+0xbca>
 800193c:	f3af 8000 	nop.w
 8001940:	00000000 	.word	0x00000000
 8001944:	4072c000 	.word	0x4072c000
 8001948:	00000000 	.word	0x00000000
 800194c:	4062c000 	.word	0x4062c000
 8001950:	200001f8 	.word	0x200001f8
 8001954:	200001d0 	.word	0x200001d0
 8001958:	200000a0 	.word	0x200000a0
 800195c:	200001b4 	.word	0x200001b4
 8001960:	200001ac 	.word	0x200001ac
 8001964:	200001c4 	.word	0x200001c4
 8001968:	20000200 	.word	0x20000200
 800196c:	406f4000 	.word	0x406f4000
 8001970:	200001e8 	.word	0x200001e8
 8001974:	200001e0 	.word	0x200001e0
 8001978:	08004704 	.word	0x08004704
		} else if (milis > but_timeOut + 150) {
 800197c:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <menu_process+0xd08>)
 800197e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001982:	a359      	add	r3, pc, #356	; (adr r3, 8001ae8 <menu_process+0xd00>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fc98 	bl	80002bc <__adddf3>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <menu_process+0xd0c>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fea5 	bl	80006e8 <__aeabi_dcmplt>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <menu_process+0xbca>

			lcd_put_cur(1, 0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 f9bb 	bl	8001d22 <lcd_put_cur>
			lcd_send_string("                ");
 80019ac:	4852      	ldr	r0, [pc, #328]	; (8001af8 <menu_process+0xd10>)
 80019ae:	f000 fa14 	bl	8001dda <lcd_send_string>
		}
		if (btn_up == 1) {
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <menu_process+0xd14>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d13b      	bne.n	8001a32 <menu_process+0xc4a>
			if (*(value_ptr + menu3_index) < 1000) {
 80019ba:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <menu_process+0xd18>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <menu_process+0xd1c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019cc:	da31      	bge.n	8001a32 <menu_process+0xc4a>
				*(value_ptr + menu3_index) = *(value_ptr + menu3_index) + 1;
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <menu_process+0xd18>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <menu_process+0xd1c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <menu_process+0xd18>)
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <menu_process+0xd1c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3201      	adds	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <menu_process+0xd20>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7fe fe9f 	bl	8000738 <__aeabi_d2uiz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fc9b 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <menu_process+0xd20>)
 8001a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <menu_process+0xd24>)
 8001a0e:	f7fe fe89 	bl	8000724 <__aeabi_dcmpgt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <menu_process+0xc4a>
					up_dwn_ratio = up_dwn_ratio - 10;
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <menu_process+0xd20>)
 8001a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <menu_process+0xd24>)
 8001a24:	f7fe fc48 	bl	80002b8 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4936      	ldr	r1, [pc, #216]	; (8001b08 <menu_process+0xd20>)
 8001a2e:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

		}
		if (btn_dwn == 1) {
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <menu_process+0xd28>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d13a      	bne.n	8001ab0 <menu_process+0xcc8>
			if (*(value_ptr + menu3_index) > 0) {
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <menu_process+0xd18>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <menu_process+0xd1c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	dd31      	ble.n	8001ab0 <menu_process+0xcc8>
				*(value_ptr + menu3_index) = *(value_ptr + menu3_index) - 1;
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <menu_process+0xd18>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <menu_process+0xd1c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <menu_process+0xd18>)
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <menu_process+0xd1c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3a01      	subs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
				HAL_Delay(up_dwn_ratio);
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <menu_process+0xd20>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7fe fe60 	bl	8000738 <__aeabi_d2uiz>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fc5c 	bl	8002338 <HAL_Delay>

				if (up_dwn_ratio > 10) {
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <menu_process+0xd20>)
 8001a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <menu_process+0xd24>)
 8001a8c:	f7fe fe4a 	bl	8000724 <__aeabi_dcmpgt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <menu_process+0xcc8>
					up_dwn_ratio = up_dwn_ratio - 10;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <menu_process+0xd20>)
 8001a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <menu_process+0xd24>)
 8001aa2:	f7fe fc09 	bl	80002b8 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4917      	ldr	r1, [pc, #92]	; (8001b08 <menu_process+0xd20>)
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
		if (btn_dwn == 0 && btn_up == 0) {
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <menu_process+0xd28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <menu_process+0xce4>
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <menu_process+0xd14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <menu_process+0xce4>
			up_dwn_ratio = 250;
 8001ac0:	4911      	ldr	r1, [pc, #68]	; (8001b08 <menu_process+0xd20>)
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <menu_process+0xd2c>)
 8001ac8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (btn_ok == 1) {
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <menu_process+0xd30>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <menu_process+0xcf2>

			menu3_next = 2;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <menu_process+0xd34>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
		}

	}
	exit_task();
 8001ada:	f000 f821 	bl	8001b20 <exit_task>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	4062c000 	.word	0x4062c000
 8001af0:	200001e8 	.word	0x200001e8
 8001af4:	200001e0 	.word	0x200001e0
 8001af8:	08004704 	.word	0x08004704
 8001afc:	200001b0 	.word	0x200001b0
 8001b00:	200001f8 	.word	0x200001f8
 8001b04:	200001d0 	.word	0x200001d0
 8001b08:	20000200 	.word	0x20000200
 8001b0c:	40240000 	.word	0x40240000
 8001b10:	200001b4 	.word	0x200001b4
 8001b14:	406f4000 	.word	0x406f4000
 8001b18:	200001ac 	.word	0x200001ac
 8001b1c:	200001c4 	.word	0x200001c4

08001b20 <exit_task>:
	lcd_put_cur(1, 0);
	lcd_send_int(2000);

}

void exit_task() {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	if (menu_next != 0
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <exit_task+0xf0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d068      	beq.n	8001bfe <exit_task+0xde>
			&& (menu1_next != 0 || menu2_next != 0 || menu3_next != 0)) {
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <exit_task+0xf4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <exit_task+0x24>
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <exit_task+0xf8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <exit_task+0x24>
 8001b3c:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <exit_task+0xfc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d05c      	beq.n	8001bfe <exit_task+0xde>
		if (btn_ok == 1) { // Butona basılırken
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <exit_task+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <exit_task+0x38>
			exit_next = 1;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <exit_task+0x104>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
			btn_ok = 10;
 8001b52:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <exit_task+0x100>)
 8001b54:	220a      	movs	r2, #10
 8001b56:	601a      	str	r2, [r3, #0]
		}

		if (exit_next == 1) {
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <exit_task+0x104>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d110      	bne.n	8001b82 <exit_task+0x62>
			exit_timeOut = milis + 3000;
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <exit_task+0x108>)
 8001b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b66:	a328      	add	r3, pc, #160	; (adr r3, 8001c08 <exit_task+0xe8>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	492d      	ldr	r1, [pc, #180]	; (8001c2c <exit_task+0x10c>)
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
			exit_next = 2;
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <exit_task+0x104>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]
			menu3_next = 0;
			exit_next = 1000;
		}

	}
}
 8001b80:	e03d      	b.n	8001bfe <exit_task+0xde>
		} else if (exit_next == 2) {
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <exit_task+0x104>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d120      	bne.n	8001bcc <exit_task+0xac>
			if (btn_ok != 10) {
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <exit_task+0x100>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d00c      	beq.n	8001bac <exit_task+0x8c>
				exit_timeOut = milis + 3000;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <exit_task+0x108>)
 8001b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b98:	a31b      	add	r3, pc, #108	; (adr r3, 8001c08 <exit_task+0xe8>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fb8d 	bl	80002bc <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <exit_task+0x10c>)
 8001ba8:	e9c1 2300 	strd	r2, r3, [r1]
			if (milis > exit_timeOut) {
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <exit_task+0x108>)
 8001bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <exit_task+0x10c>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fdb4 	bl	8000724 <__aeabi_dcmpgt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <exit_task+0xa4>
}
 8001bc2:	e01c      	b.n	8001bfe <exit_task+0xde>
				exit_next = 3;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <exit_task+0x104>)
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	e018      	b.n	8001bfe <exit_task+0xde>
		} else if (exit_next == 3) {
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <exit_task+0x104>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d114      	bne.n	8001bfe <exit_task+0xde>
			lcd_clear();
 8001bd4:	f000 f88e 	bl	8001cf4 <lcd_clear>
			main_next = 0;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <exit_task+0x110>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			menu_next = 0;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <exit_task+0xf0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
			menu1_next = 0;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <exit_task+0xf4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
			menu2_next = 0;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <exit_task+0xf8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
			menu3_next = 0;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <exit_task+0xfc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
			exit_next = 1000;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <exit_task+0x104>)
 8001bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40a77000 	.word	0x40a77000
 8001c10:	200001b8 	.word	0x200001b8
 8001c14:	200001bc 	.word	0x200001bc
 8001c18:	200001c0 	.word	0x200001c0
 8001c1c:	200001c4 	.word	0x200001c4
 8001c20:	200001ac 	.word	0x200001ac
 8001c24:	200001d8 	.word	0x200001d8
 8001c28:	200001e0 	.word	0x200001e0
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	200001d4 	.word	0x200001d4

08001c34 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f023 030f 	bic.w	r3, r3, #15
 8001c44:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	f043 030c 	orr.w	r3, r3, #12
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	f043 030c 	orr.w	r3, r3, #12
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c74:	f107 0208 	add.w	r2, r7, #8
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	214e      	movs	r1, #78	; 0x4e
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <lcd_send_cmd+0x5c>)
 8001c82:	f000 ff53 	bl	8002b2c <HAL_I2C_Master_Transmit>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000218 	.word	0x20000218

08001c94 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f023 030f 	bic.w	r3, r3, #15
 8001ca4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f043 030d 	orr.w	r3, r3, #13
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f043 0309 	orr.w	r3, r3, #9
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	f043 030d 	orr.w	r3, r3, #13
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	f043 0309 	orr.w	r3, r3, #9
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	2364      	movs	r3, #100	; 0x64
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2304      	movs	r3, #4
 8001cde:	214e      	movs	r1, #78	; 0x4e
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <lcd_send_data+0x5c>)
 8001ce2:	f000 ff23 	bl	8002b2c <HAL_I2C_Master_Transmit>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000218 	.word	0x20000218

08001cf4 <lcd_clear>:

void lcd_clear (void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001cfa:	2080      	movs	r0, #128	; 0x80
 8001cfc:	f7ff ff9a 	bl	8001c34 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	e005      	b.n	8001d12 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001d06:	2020      	movs	r0, #32
 8001d08:	f7ff ffc4 	bl	8001c94 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b45      	cmp	r3, #69	; 0x45
 8001d16:	ddf6      	ble.n	8001d06 <lcd_clear+0x12>
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
    switch (row)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <lcd_put_cur+0x18>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <lcd_put_cur+0x22>
 8001d38:	e009      	b.n	8001d4e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d40:	603b      	str	r3, [r7, #0]
            break;
 8001d42:	e004      	b.n	8001d4e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d4a:	603b      	str	r3, [r7, #0]
            break;
 8001d4c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff6e 	bl	8001c34 <lcd_send_cmd>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <lcd_init>:


void lcd_init (void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d64:	2032      	movs	r0, #50	; 0x32
 8001d66:	f000 fae7 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d6a:	2030      	movs	r0, #48	; 0x30
 8001d6c:	f7ff ff62 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d70:	2005      	movs	r0, #5
 8001d72:	f000 fae1 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d76:	2030      	movs	r0, #48	; 0x30
 8001d78:	f7ff ff5c 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 fadb 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d82:	2030      	movs	r0, #48	; 0x30
 8001d84:	f7ff ff56 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(10);
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f000 fad5 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001d8e:	2020      	movs	r0, #32
 8001d90:	f7ff ff50 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f000 facf 	bl	8002338 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d9a:	2028      	movs	r0, #40	; 0x28
 8001d9c:	f7ff ff4a 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f000 fac9 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7ff ff44 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 fac3 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff ff3e 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(1);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f000 fabd 	bl	8002338 <HAL_Delay>
	HAL_Delay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 faba 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	f7ff ff35 	bl	8001c34 <lcd_send_cmd>
	HAL_Delay(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 fab4 	bl	8002338 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001dd0:	200c      	movs	r0, #12
 8001dd2:	f7ff ff2f 	bl	8001c34 <lcd_send_cmd>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001de2:	e006      	b.n	8001df2 <lcd_send_string+0x18>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff51 	bl	8001c94 <lcd_send_data>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f4      	bne.n	8001de4 <lcd_send_string+0xa>
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <lcd_send_int>:
void lcd_send_int(int number)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b090      	sub	sp, #64	; 0x40
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "%d", number);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4906      	ldr	r1, [pc, #24]	; (8001e2c <lcd_send_int+0x28>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 ffb5 	bl	8003d84 <siprintf>

	lcd_send_string(buffer);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffdb 	bl	8001dda <lcd_send_string>
}
 8001e24:	bf00      	nop
 8001e26:	3740      	adds	r7, #64	; 0x40
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08004720 	.word	0x08004720

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e34:	f000 fa0e 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e38:	f000 f81e 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3c:	f000 f8bc 	bl	8001fb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e40:	f000 f88c 	bl	8001f5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001e44:	f7ff ff8c 	bl	8001d60 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		milis = HAL_GetTick();
 8001e48:	f000 fa6a 	bl	8002320 <HAL_GetTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb70 	bl	8000534 <__aeabi_ui2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4906      	ldr	r1, [pc, #24]	; (8001e74 <main+0x44>)
 8001e5a:	e9c1 2300 	strd	r2, r3, [r1]
		but_state();
 8001e5e:	f7fe fe09 	bl	8000a74 <but_state>
		but_task();
 8001e62:	f7fe fe41 	bl	8000ae8 <but_task>
		main_string();
 8001e66:	f7fe fe6d 	bl	8000b44 <main_string>
		next_process();
 8001e6a:	f7fe fe85 	bl	8000b78 <next_process>
		menu_process();
 8001e6e:	f7fe ffbb 	bl	8000de8 <menu_process>
		milis = HAL_GetTick();
 8001e72:	e7e9      	b.n	8001e48 <main+0x18>
 8001e74:	200001e0 	.word	0x200001e0

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	2234      	movs	r2, #52	; 0x34
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 ff9c 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <SystemClock_Config+0xdc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <SystemClock_Config+0xdc>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <SystemClock_Config+0xdc>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <SystemClock_Config+0xe0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <SystemClock_Config+0xe0>)
 8001ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <SystemClock_Config+0xe0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001edc:	2310      	movs	r3, #16
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001eec:	23b4      	movs	r3, #180	; 0xb4
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 fca1 	bl	8003848 <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f0c:	f000 f890 	bl	8002030 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f10:	f001 f914 	bl	800313c <HAL_PWREx_EnableOverDrive>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f1a:	f000 f889 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1e:	230f      	movs	r3, #15
 8001f20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f22:	2302      	movs	r3, #2
 8001f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2105      	movs	r1, #5
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 f94d 	bl	80031dc <HAL_RCC_ClockConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f48:	f000 f872 	bl	8002030 <Error_Handler>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3750      	adds	r7, #80	; 0x50
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <MX_I2C1_Init+0x54>)
 8001f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_I2C1_Init+0x58>)
 8001f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f9a:	f000 fc83 	bl	80028a4 <HAL_I2C_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 f844 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000218 	.word	0x20000218
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	000186a0 	.word	0x000186a0

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_GPIO_Init+0x70>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <MX_GPIO_Init+0x70>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_GPIO_Init+0x70>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_GPIO_Init+0x70>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <MX_GPIO_Init+0x70>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_GPIO_Init+0x70>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : OK_BUT_Pin */
  GPIO_InitStruct.Pin = OK_BUT_Pin;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OK_BUT_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4619      	mov	r1, r3
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_GPIO_Init+0x74>)
 800201c:	f000 fa96 	bl	800254c <HAL_GPIO_Init>

}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40020800 	.word	0x40020800

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>
	...

0800203c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_MspInit+0x4c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x4c>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207a:	2007      	movs	r0, #7
 800207c:	f000 fa32 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_I2C_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12c      	bne.n	8002108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d0:	2312      	movs	r3, #18
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020dc:	2304      	movs	r3, #4
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <HAL_I2C_MspInit+0x8c>)
 80020e8:	f000 fa30 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002168:	f000 f8c6 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f001 fe18 	bl	8003dd4 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	2000026c 	.word	0x2000026c
 80021d8:	200003c0 	.word	0x200003c0

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222a:	f7ff ffd7 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f001 fdd7 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7ff fdfd 	bl	8001e30 <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002244:	08004780 	.word	0x08004780
  ldr r2, =_sbss
 8002248:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 800224c:	200003bc 	.word	0x200003bc

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f931 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	2000      	movs	r0, #0
 8002284:	f000 f808 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fed8 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x54>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f93b 	bl	8002532 <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f000 f911 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_InitTick+0x5c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200000f0 	.word	0x200000f0
 80022f0:	200000f8 	.word	0x200000f8
 80022f4:	200000f4 	.word	0x200000f4

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200000f8 	.word	0x200000f8
 800231c:	20000270 	.word	0x20000270

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000270 	.word	0x20000270

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200000f8 	.word	0x200000f8

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff47 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff5c 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffb0 	bl	80024a0 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e165      	b.n	8002834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8154 	bne.w	800282e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80ae 	beq.w	800282e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_GPIO_Init+0x300>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a5c      	ldr	r2, [pc, #368]	; (800284c <HAL_GPIO_Init+0x300>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_GPIO_Init+0x300>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a58      	ldr	r2, [pc, #352]	; (8002850 <HAL_GPIO_Init+0x304>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4f      	ldr	r2, [pc, #316]	; (8002854 <HAL_GPIO_Init+0x308>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x21a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_GPIO_Init+0x30c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x216>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_GPIO_Init+0x310>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x212>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_GPIO_Init+0x314>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <HAL_GPIO_Init+0x318>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x20a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4a      	ldr	r2, [pc, #296]	; (8002868 <HAL_GPIO_Init+0x31c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x206>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a49      	ldr	r2, [pc, #292]	; (800286c <HAL_GPIO_Init+0x320>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x202>
 800274a:	2306      	movs	r3, #6
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800274e:	2307      	movs	r3, #7
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x304>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_GPIO_Init+0x324>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae96 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e12b      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fbde 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f000 fd5a 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a81      	ldr	r2, [pc, #516]	; (8002b18 <HAL_I2C_Init+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_I2C_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a7d      	ldr	r2, [pc, #500]	; (8002b20 <HAL_I2C_Init+0x27c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0e7      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a78      	ldr	r2, [pc, #480]	; (8002b24 <HAL_I2C_Init+0x280>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_I2C_Init+0x274>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a69      	ldr	r2, [pc, #420]	; (8002b28 <HAL_I2C_Init+0x284>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	495c      	ldr	r1, [pc, #368]	; (8002b18 <HAL_I2C_Init+0x274>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d819      	bhi.n	80029e0 <HAL_I2C_Init+0x13c>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_Init+0x138>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e59      	subs	r1, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	e051      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029dc:	2304      	movs	r3, #4
 80029de:	e04f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_I2C_Init+0x168>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_I2C_Init+0x18e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x196>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_I2C_Init+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e58      	subs	r0, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	0099      	lsls	r1, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6911      	ldr	r1, [r2, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	000186a0 	.word	0x000186a0
 8002b1c:	001e847f 	.word	0x001e847f
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff fbee 	bl	8002320 <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 80e0 	bne.w	8002d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2319      	movs	r3, #25
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4970      	ldr	r1, [pc, #448]	; (8002d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f964 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e0d3      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x50>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d007      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f89c 	bl	8002d28 <I2C_MasterRequestWrite>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e08d      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c10:	e066      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f9de 	bl	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Master_Transmit+0x188>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6a39      	ldr	r1, [r7, #32]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f9ce 	bl	800305a <I2C_WaitOnBTFFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e01a      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d194      	bne.n	8002c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f84f 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f875 	bl	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f865 	bl	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3c:	e025      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d021      	beq.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff fa6b 	bl	8002320 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e023      	b.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10d      	bne.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	e00c      	b.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d0b6      	beq.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee8:	e051      	b.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d123      	bne.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e046      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d021      	beq.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7ff f9e9 	bl	8002320 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e020      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10c      	bne.n	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e00b      	b.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d18d      	bne.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe4:	e02d      	b.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f878 	bl	80030dc <I2C_IsAcknowledgeFailed>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e02d      	b.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d021      	beq.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7ff f98f 	bl	8002320 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e007      	b.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d1ca      	bne.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003066:	e02d      	b.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f837 	bl	80030dc <I2C_IsAcknowledgeFailed>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e02d      	b.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d021      	beq.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003080:	f7ff f94e 	bl	8002320 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d116      	bne.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e007      	b.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d1ca      	bne.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d11b      	bne.n	800312c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003168:	f7ff f8da 	bl	8002320 <HAL_GetTick>
 800316c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316e:	e009      	b.n	8003184 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003170:	f7ff f8d6 	bl	8002320 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317e:	d901      	bls.n	8003184 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e01f      	b.n	80031c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d1ee      	bne.n	8003170 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003198:	f7ff f8c2 	bl	8002320 <HAL_GetTick>
 800319c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800319e:	e009      	b.n	80031b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031a0:	f7ff f8be 	bl	8002320 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ae:	d901      	bls.n	80031b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e007      	b.n	80031c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c0:	d1ee      	bne.n	80031a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	420e0040 	.word	0x420e0040
 80031d4:	40007000 	.word	0x40007000
 80031d8:	420e0044 	.word	0x420e0044

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7ff f828 	bl	8002320 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7ff f824 	bl	8002320 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f841 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff88 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	08004724 	.word	0x08004724
 80033a0:	200000f0 	.word	0x200000f0
 80033a4:	200000f4 	.word	0x200000f4

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	200000f0 	.word	0x200000f0

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08004734 	.word	0x08004734

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0ae      	sub	sp, #184	; 0xb8
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340e:	4bcb      	ldr	r3, [pc, #812]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b0c      	cmp	r3, #12
 8003418:	f200 8206 	bhi.w	8003828 <HAL_RCC_GetSysClockFreq+0x440>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_RCC_GetSysClockFreq+0x3c>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	08003829 	.word	0x08003829
 800342c:	08003829 	.word	0x08003829
 8003430:	08003829 	.word	0x08003829
 8003434:	08003461 	.word	0x08003461
 8003438:	08003829 	.word	0x08003829
 800343c:	08003829 	.word	0x08003829
 8003440:	08003829 	.word	0x08003829
 8003444:	08003469 	.word	0x08003469
 8003448:	08003829 	.word	0x08003829
 800344c:	08003829 	.word	0x08003829
 8003450:	08003829 	.word	0x08003829
 8003454:	08003659 	.word	0x08003659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4bb9      	ldr	r3, [pc, #740]	; (8003740 <HAL_RCC_GetSysClockFreq+0x358>)
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800345e:	e1e7      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4bb8      	ldr	r3, [pc, #736]	; (8003744 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003466:	e1e3      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4bb4      	ldr	r3, [pc, #720]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003474:	4bb1      	ldr	r3, [pc, #708]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d071      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4bae      	ldr	r3, [pc, #696]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800348c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4621      	mov	r1, r4
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	6439      	str	r1, [r7, #64]	; 0x40
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80034d8:	4649      	mov	r1, r9
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4641      	mov	r1, r8
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4641      	mov	r1, r8
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	4641      	mov	r1, r8
 80034e8:	1a51      	subs	r1, r2, r1
 80034ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80034ec:	4649      	mov	r1, r9
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003500:	4649      	mov	r1, r9
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4641      	mov	r1, r8
 8003506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350a:	4641      	mov	r1, r8
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4622      	mov	r2, r4
 8003516:	189b      	adds	r3, r3, r2
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
 800351a:	462b      	mov	r3, r5
 800351c:	460a      	mov	r2, r1
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003530:	4629      	mov	r1, r5
 8003532:	024b      	lsls	r3, r1, #9
 8003534:	4621      	mov	r1, r4
 8003536:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800353a:	4621      	mov	r1, r4
 800353c:	024a      	lsls	r2, r1, #9
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800354c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003550:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003554:	f7fd f910 	bl	8000778 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003562:	e067      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003564:	4b75      	ldr	r3, [pc, #468]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003570:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	67bb      	str	r3, [r7, #120]	; 0x78
 800357e:	2300      	movs	r3, #0
 8003580:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003582:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4621      	mov	r1, r4
 80035a0:	1a51      	subs	r1, r2, r1
 80035a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb63 0301 	sbc.w	r3, r3, r1
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80035b8:	4649      	mov	r1, r9
 80035ba:	018b      	lsls	r3, r1, #6
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c2:	4641      	mov	r1, r8
 80035c4:	018a      	lsls	r2, r1, #6
 80035c6:	4641      	mov	r1, r8
 80035c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80035cc:	4649      	mov	r1, r9
 80035ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e6:	4692      	mov	sl, r2
 80035e8:	469b      	mov	fp, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	eb1a 0303 	adds.w	r3, sl, r3
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	462b      	mov	r3, r5
 80035f4:	eb4b 0303 	adc.w	r3, fp, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361c:	2200      	movs	r2, #0
 800361e:	673b      	str	r3, [r7, #112]	; 0x70
 8003620:	677a      	str	r2, [r7, #116]	; 0x74
 8003622:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003626:	f7fd f8a7 	bl	8000778 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4613      	mov	r3, r2
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003634:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003656:	e0eb      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003664:	4b35      	ldr	r3, [pc, #212]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06b      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	2200      	movs	r2, #0
 8003678:	66bb      	str	r3, [r7, #104]	; 0x68
 800367a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800367c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	663b      	str	r3, [r7, #96]	; 0x60
 8003684:	2300      	movs	r3, #0
 8003686:	667b      	str	r3, [r7, #100]	; 0x64
 8003688:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800368c:	4622      	mov	r2, r4
 800368e:	462b      	mov	r3, r5
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	0159      	lsls	r1, r3, #5
 800369a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369e:	0150      	lsls	r0, r2, #5
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4621      	mov	r1, r4
 80036a6:	1a51      	subs	r1, r2, r1
 80036a8:	61b9      	str	r1, [r7, #24]
 80036aa:	4629      	mov	r1, r5
 80036ac:	eb63 0301 	sbc.w	r3, r3, r1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036be:	4659      	mov	r1, fp
 80036c0:	018b      	lsls	r3, r1, #6
 80036c2:	4651      	mov	r1, sl
 80036c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c8:	4651      	mov	r1, sl
 80036ca:	018a      	lsls	r2, r1, #6
 80036cc:	4651      	mov	r1, sl
 80036ce:	ebb2 0801 	subs.w	r8, r2, r1
 80036d2:	4659      	mov	r1, fp
 80036d4:	eb63 0901 	sbc.w	r9, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ec:	4690      	mov	r8, r2
 80036ee:	4699      	mov	r9, r3
 80036f0:	4623      	mov	r3, r4
 80036f2:	eb18 0303 	adds.w	r3, r8, r3
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	462b      	mov	r3, r5
 80036fa:	eb49 0303 	adc.w	r3, r9, r3
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800370c:	4629      	mov	r1, r5
 800370e:	024b      	lsls	r3, r1, #9
 8003710:	4621      	mov	r1, r4
 8003712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003716:	4621      	mov	r1, r4
 8003718:	024a      	lsls	r2, r1, #9
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003722:	2200      	movs	r2, #0
 8003724:	65bb      	str	r3, [r7, #88]	; 0x58
 8003726:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800372c:	f7fd f824 	bl	8000778 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800373a:	e065      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x420>
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003748:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_GetSysClockFreq+0x458>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	2200      	movs	r2, #0
 8003750:	4618      	mov	r0, r3
 8003752:	4611      	mov	r1, r2
 8003754:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003758:	653b      	str	r3, [r7, #80]	; 0x50
 800375a:	2300      	movs	r3, #0
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
 800375e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003762:	4642      	mov	r2, r8
 8003764:	464b      	mov	r3, r9
 8003766:	f04f 0000 	mov.w	r0, #0
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	0159      	lsls	r1, r3, #5
 8003770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003774:	0150      	lsls	r0, r2, #5
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4641      	mov	r1, r8
 800377c:	1a51      	subs	r1, r2, r1
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	4649      	mov	r1, r9
 8003782:	eb63 0301 	sbc.w	r3, r3, r1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003794:	4659      	mov	r1, fp
 8003796:	018b      	lsls	r3, r1, #6
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379e:	4651      	mov	r1, sl
 80037a0:	018a      	lsls	r2, r1, #6
 80037a2:	4651      	mov	r1, sl
 80037a4:	1a54      	subs	r4, r2, r1
 80037a6:	4659      	mov	r1, fp
 80037a8:	eb63 0501 	sbc.w	r5, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037f0:	2200      	movs	r2, #0
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80037f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037fa:	f7fc ffbd 	bl	8000778 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4613      	mov	r3, r2
 8003804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_GetSysClockFreq+0x458>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800381a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003826:	e003      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_GetSysClockFreq+0x45c>)
 800382a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800382e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003834:	4618      	mov	r0, r3
 8003836:	37b8      	adds	r7, #184	; 0xb8
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400

08003848 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e28d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8083 	beq.w	800396e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003868:	4b94      	ldr	r3, [pc, #592]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003874:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800387c:	2b08      	cmp	r3, #8
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003880:	4b8e      	ldr	r3, [pc, #568]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388c:	d00c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d112      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <HAL_RCC_OscConfig+0x124>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d157      	bne.n	800396c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e25a      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x90>
 80038ca:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7b      	ldr	r2, [pc, #492]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xb4>
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a75      	ldr	r2, [pc, #468]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a72      	ldr	r2, [pc, #456]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6e      	ldr	r2, [pc, #440]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fd00 	bl	8002320 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe fcfc 	bl	8002320 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e21f      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xdc>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fcec 	bl	8002320 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fce8 	bl	8002320 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e20b      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x104>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d06f      	beq.n	8003a5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800397a:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d105      	bne.n	800399e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003992:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399e:	4b47      	ldr	r3, [pc, #284]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d11c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b44      	ldr	r3, [pc, #272]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e1d3      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ce:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4937      	ldr	r1, [pc, #220]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	e03a      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ec:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <HAL_RCC_OscConfig+0x278>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe fc95 	bl	8002320 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fe fc91 	bl	8002320 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1b4      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4925      	ldr	r1, [pc, #148]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
 8003a2c:	e015      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x278>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fc74 	bl	8002320 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3c:	f7fe fc70 	bl	8002320 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e193      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d036      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe fc54 	bl	8002320 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a7c:	f7fe fc50 	bl	8002320 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e173      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x234>
 8003a9a:	e01b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fc3d 	bl	8002320 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fc39 	bl	8002320 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d907      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e15c      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ea      	bne.n	8003aaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8097 	beq.w	8003c10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae6:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	4b7f      	ldr	r3, [pc, #508]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b79      	ldr	r3, [pc, #484]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b76      	ldr	r3, [pc, #472]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a75      	ldr	r2, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fbf9 	bl	8002320 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe fbf5 	bl	8002320 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e118      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x31e>
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x340>
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b88:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a59      	ldr	r2, [pc, #356]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	4b57      	ldr	r3, [pc, #348]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a56      	ldr	r2, [pc, #344]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fbba 	bl	8002320 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fbb6 	bl	8002320 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0d7      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x368>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fba4 	bl	8002320 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fba0 	bl	8002320 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0c1      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4a3a      	ldr	r2, [pc, #232]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ad 	beq.w	8003d74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d060      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d145      	bne.n	8003cba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe fb74 	bl	8002320 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fb70 	bl	8002320 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e093      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	491b      	ldr	r1, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe fb45 	bl	8002320 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fb41 	bl	8002320 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e064      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x452>
 8003cb8:	e05c      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fb2e 	bl	8002320 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fb2a 	bl	8002320 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x480>
 8003ce6:	e045      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e040      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCC_OscConfig+0x538>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d030      	beq.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d129      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d122      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d119      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	b500      	push	{lr}
 8003d88:	b09c      	sub	sp, #112	; 0x70
 8003d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <siprintf+0x38>)
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	9104      	str	r1, [sp, #16]
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	a902      	add	r1, sp, #8
 8003da8:	f000 f992 	bl	80040d0 <_svfiprintf_r>
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	20000148 	.word	0x20000148
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <memset>:
 8003dc4:	4402      	add	r2, r0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <__errno>:
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <__errno+0x8>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000148 	.word	0x20000148

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4d0d      	ldr	r5, [pc, #52]	; (8003e18 <__libc_init_array+0x38>)
 8003de4:	4c0d      	ldr	r4, [pc, #52]	; (8003e1c <__libc_init_array+0x3c>)
 8003de6:	1b64      	subs	r4, r4, r5
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	2600      	movs	r6, #0
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	4d0b      	ldr	r5, [pc, #44]	; (8003e20 <__libc_init_array+0x40>)
 8003df2:	4c0c      	ldr	r4, [pc, #48]	; (8003e24 <__libc_init_array+0x44>)
 8003df4:	f000 fc6a 	bl	80046cc <_init>
 8003df8:	1b64      	subs	r4, r4, r5
 8003dfa:	10a4      	asrs	r4, r4, #2
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	08004778 	.word	0x08004778
 8003e1c:	08004778 	.word	0x08004778
 8003e20:	08004778 	.word	0x08004778
 8003e24:	0800477c 	.word	0x0800477c

08003e28 <__retarget_lock_acquire_recursive>:
 8003e28:	4770      	bx	lr

08003e2a <__retarget_lock_release_recursive>:
 8003e2a:	4770      	bx	lr

08003e2c <_free_r>:
 8003e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d044      	beq.n	8003ebc <_free_r+0x90>
 8003e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e3e:	bfb8      	it	lt
 8003e40:	18e4      	addlt	r4, r4, r3
 8003e42:	f000 f8df 	bl	8004004 <__malloc_lock>
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <_free_r+0x94>)
 8003e48:	9801      	ldr	r0, [sp, #4]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	b933      	cbnz	r3, 8003e5c <_free_r+0x30>
 8003e4e:	6063      	str	r3, [r4, #4]
 8003e50:	6014      	str	r4, [r2, #0]
 8003e52:	b003      	add	sp, #12
 8003e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e58:	f000 b8da 	b.w	8004010 <__malloc_unlock>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d908      	bls.n	8003e72 <_free_r+0x46>
 8003e60:	6825      	ldr	r5, [r4, #0]
 8003e62:	1961      	adds	r1, r4, r5
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf01      	itttt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	1949      	addeq	r1, r1, r5
 8003e6e:	6021      	streq	r1, [r4, #0]
 8003e70:	e7ed      	b.n	8003e4e <_free_r+0x22>
 8003e72:	461a      	mov	r2, r3
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b10b      	cbz	r3, 8003e7c <_free_r+0x50>
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	d9fa      	bls.n	8003e72 <_free_r+0x46>
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	1855      	adds	r5, r2, r1
 8003e80:	42a5      	cmp	r5, r4
 8003e82:	d10b      	bne.n	8003e9c <_free_r+0x70>
 8003e84:	6824      	ldr	r4, [r4, #0]
 8003e86:	4421      	add	r1, r4
 8003e88:	1854      	adds	r4, r2, r1
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	d1e0      	bne.n	8003e52 <_free_r+0x26>
 8003e90:	681c      	ldr	r4, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	6053      	str	r3, [r2, #4]
 8003e96:	440c      	add	r4, r1
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	e7da      	b.n	8003e52 <_free_r+0x26>
 8003e9c:	d902      	bls.n	8003ea4 <_free_r+0x78>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	6003      	str	r3, [r0, #0]
 8003ea2:	e7d6      	b.n	8003e52 <_free_r+0x26>
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	bf04      	itt	eq
 8003eac:	6819      	ldreq	r1, [r3, #0]
 8003eae:	685b      	ldreq	r3, [r3, #4]
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	bf04      	itt	eq
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	6054      	str	r4, [r2, #4]
 8003eba:	e7ca      	b.n	8003e52 <_free_r+0x26>
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd30      	pop	{r4, r5, pc}
 8003ec0:	200003b4 	.word	0x200003b4

08003ec4 <sbrk_aligned>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4e0e      	ldr	r6, [pc, #56]	; (8003f00 <sbrk_aligned+0x3c>)
 8003ec8:	460c      	mov	r4, r1
 8003eca:	6831      	ldr	r1, [r6, #0]
 8003ecc:	4605      	mov	r5, r0
 8003ece:	b911      	cbnz	r1, 8003ed6 <sbrk_aligned+0x12>
 8003ed0:	f000 fba6 	bl	8004620 <_sbrk_r>
 8003ed4:	6030      	str	r0, [r6, #0]
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 fba1 	bl	8004620 <_sbrk_r>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	d00a      	beq.n	8003ef8 <sbrk_aligned+0x34>
 8003ee2:	1cc4      	adds	r4, r0, #3
 8003ee4:	f024 0403 	bic.w	r4, r4, #3
 8003ee8:	42a0      	cmp	r0, r4
 8003eea:	d007      	beq.n	8003efc <sbrk_aligned+0x38>
 8003eec:	1a21      	subs	r1, r4, r0
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fb96 	bl	8004620 <_sbrk_r>
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d101      	bne.n	8003efc <sbrk_aligned+0x38>
 8003ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8003efc:	4620      	mov	r0, r4
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	200003b8 	.word	0x200003b8

08003f04 <_malloc_r>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	1ccd      	adds	r5, r1, #3
 8003f0a:	f025 0503 	bic.w	r5, r5, #3
 8003f0e:	3508      	adds	r5, #8
 8003f10:	2d0c      	cmp	r5, #12
 8003f12:	bf38      	it	cc
 8003f14:	250c      	movcc	r5, #12
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	4607      	mov	r7, r0
 8003f1a:	db01      	blt.n	8003f20 <_malloc_r+0x1c>
 8003f1c:	42a9      	cmp	r1, r5
 8003f1e:	d905      	bls.n	8003f2c <_malloc_r+0x28>
 8003f20:	230c      	movs	r3, #12
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	2600      	movs	r6, #0
 8003f26:	4630      	mov	r0, r6
 8003f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004000 <_malloc_r+0xfc>
 8003f30:	f000 f868 	bl	8004004 <__malloc_lock>
 8003f34:	f8d8 3000 	ldr.w	r3, [r8]
 8003f38:	461c      	mov	r4, r3
 8003f3a:	bb5c      	cbnz	r4, 8003f94 <_malloc_r+0x90>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f7ff ffc0 	bl	8003ec4 <sbrk_aligned>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	4604      	mov	r4, r0
 8003f48:	d155      	bne.n	8003ff6 <_malloc_r+0xf2>
 8003f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8003f4e:	4626      	mov	r6, r4
 8003f50:	2e00      	cmp	r6, #0
 8003f52:	d145      	bne.n	8003fe0 <_malloc_r+0xdc>
 8003f54:	2c00      	cmp	r4, #0
 8003f56:	d048      	beq.n	8003fea <_malloc_r+0xe6>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	eb04 0903 	add.w	r9, r4, r3
 8003f62:	f000 fb5d 	bl	8004620 <_sbrk_r>
 8003f66:	4581      	cmp	r9, r0
 8003f68:	d13f      	bne.n	8003fea <_malloc_r+0xe6>
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	1a6d      	subs	r5, r5, r1
 8003f6e:	4629      	mov	r1, r5
 8003f70:	4638      	mov	r0, r7
 8003f72:	f7ff ffa7 	bl	8003ec4 <sbrk_aligned>
 8003f76:	3001      	adds	r0, #1
 8003f78:	d037      	beq.n	8003fea <_malloc_r+0xe6>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	442b      	add	r3, r5
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	f8d8 3000 	ldr.w	r3, [r8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d038      	beq.n	8003ffa <_malloc_r+0xf6>
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	42a2      	cmp	r2, r4
 8003f8c:	d12b      	bne.n	8003fe6 <_malloc_r+0xe2>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e00f      	b.n	8003fb4 <_malloc_r+0xb0>
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	1b52      	subs	r2, r2, r5
 8003f98:	d41f      	bmi.n	8003fda <_malloc_r+0xd6>
 8003f9a:	2a0b      	cmp	r2, #11
 8003f9c:	d917      	bls.n	8003fce <_malloc_r+0xca>
 8003f9e:	1961      	adds	r1, r4, r5
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	6025      	str	r5, [r4, #0]
 8003fa4:	bf18      	it	ne
 8003fa6:	6059      	strne	r1, [r3, #4]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	bf08      	it	eq
 8003fac:	f8c8 1000 	streq.w	r1, [r8]
 8003fb0:	5162      	str	r2, [r4, r5]
 8003fb2:	604b      	str	r3, [r1, #4]
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f104 060b 	add.w	r6, r4, #11
 8003fba:	f000 f829 	bl	8004010 <__malloc_unlock>
 8003fbe:	f026 0607 	bic.w	r6, r6, #7
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	1af2      	subs	r2, r6, r3
 8003fc6:	d0ae      	beq.n	8003f26 <_malloc_r+0x22>
 8003fc8:	1b9b      	subs	r3, r3, r6
 8003fca:	50a3      	str	r3, [r4, r2]
 8003fcc:	e7ab      	b.n	8003f26 <_malloc_r+0x22>
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	6862      	ldr	r2, [r4, #4]
 8003fd2:	d1dd      	bne.n	8003f90 <_malloc_r+0x8c>
 8003fd4:	f8c8 2000 	str.w	r2, [r8]
 8003fd8:	e7ec      	b.n	8003fb4 <_malloc_r+0xb0>
 8003fda:	4623      	mov	r3, r4
 8003fdc:	6864      	ldr	r4, [r4, #4]
 8003fde:	e7ac      	b.n	8003f3a <_malloc_r+0x36>
 8003fe0:	4634      	mov	r4, r6
 8003fe2:	6876      	ldr	r6, [r6, #4]
 8003fe4:	e7b4      	b.n	8003f50 <_malloc_r+0x4c>
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	e7cc      	b.n	8003f84 <_malloc_r+0x80>
 8003fea:	230c      	movs	r3, #12
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f000 f80e 	bl	8004010 <__malloc_unlock>
 8003ff4:	e797      	b.n	8003f26 <_malloc_r+0x22>
 8003ff6:	6025      	str	r5, [r4, #0]
 8003ff8:	e7dc      	b.n	8003fb4 <_malloc_r+0xb0>
 8003ffa:	605b      	str	r3, [r3, #4]
 8003ffc:	deff      	udf	#255	; 0xff
 8003ffe:	bf00      	nop
 8004000:	200003b4 	.word	0x200003b4

08004004 <__malloc_lock>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__malloc_lock+0x8>)
 8004006:	f7ff bf0f 	b.w	8003e28 <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	200003b0 	.word	0x200003b0

08004010 <__malloc_unlock>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__malloc_unlock+0x8>)
 8004012:	f7ff bf0a 	b.w	8003e2a <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	200003b0 	.word	0x200003b0

0800401c <__ssputs_r>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	688e      	ldr	r6, [r1, #8]
 8004022:	461f      	mov	r7, r3
 8004024:	42be      	cmp	r6, r7
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	4682      	mov	sl, r0
 800402a:	460c      	mov	r4, r1
 800402c:	4690      	mov	r8, r2
 800402e:	d82c      	bhi.n	800408a <__ssputs_r+0x6e>
 8004030:	898a      	ldrh	r2, [r1, #12]
 8004032:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004036:	d026      	beq.n	8004086 <__ssputs_r+0x6a>
 8004038:	6965      	ldr	r5, [r4, #20]
 800403a:	6909      	ldr	r1, [r1, #16]
 800403c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004040:	eba3 0901 	sub.w	r9, r3, r1
 8004044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004048:	1c7b      	adds	r3, r7, #1
 800404a:	444b      	add	r3, r9
 800404c:	106d      	asrs	r5, r5, #1
 800404e:	429d      	cmp	r5, r3
 8004050:	bf38      	it	cc
 8004052:	461d      	movcc	r5, r3
 8004054:	0553      	lsls	r3, r2, #21
 8004056:	d527      	bpl.n	80040a8 <__ssputs_r+0x8c>
 8004058:	4629      	mov	r1, r5
 800405a:	f7ff ff53 	bl	8003f04 <_malloc_r>
 800405e:	4606      	mov	r6, r0
 8004060:	b360      	cbz	r0, 80040bc <__ssputs_r+0xa0>
 8004062:	6921      	ldr	r1, [r4, #16]
 8004064:	464a      	mov	r2, r9
 8004066:	f000 faeb 	bl	8004640 <memcpy>
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004074:	81a3      	strh	r3, [r4, #12]
 8004076:	6126      	str	r6, [r4, #16]
 8004078:	6165      	str	r5, [r4, #20]
 800407a:	444e      	add	r6, r9
 800407c:	eba5 0509 	sub.w	r5, r5, r9
 8004080:	6026      	str	r6, [r4, #0]
 8004082:	60a5      	str	r5, [r4, #8]
 8004084:	463e      	mov	r6, r7
 8004086:	42be      	cmp	r6, r7
 8004088:	d900      	bls.n	800408c <__ssputs_r+0x70>
 800408a:	463e      	mov	r6, r7
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	4632      	mov	r2, r6
 8004090:	4641      	mov	r1, r8
 8004092:	f000 faab 	bl	80045ec <memmove>
 8004096:	68a3      	ldr	r3, [r4, #8]
 8004098:	1b9b      	subs	r3, r3, r6
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	4433      	add	r3, r6
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	2000      	movs	r0, #0
 80040a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a8:	462a      	mov	r2, r5
 80040aa:	f000 fad7 	bl	800465c <_realloc_r>
 80040ae:	4606      	mov	r6, r0
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d1e0      	bne.n	8004076 <__ssputs_r+0x5a>
 80040b4:	6921      	ldr	r1, [r4, #16]
 80040b6:	4650      	mov	r0, sl
 80040b8:	f7ff feb8 	bl	8003e2c <_free_r>
 80040bc:	230c      	movs	r3, #12
 80040be:	f8ca 3000 	str.w	r3, [sl]
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	e7e9      	b.n	80040a4 <__ssputs_r+0x88>

080040d0 <_svfiprintf_r>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4698      	mov	r8, r3
 80040d6:	898b      	ldrh	r3, [r1, #12]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	b09d      	sub	sp, #116	; 0x74
 80040dc:	4607      	mov	r7, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	d50e      	bpl.n	8004102 <_svfiprintf_r+0x32>
 80040e4:	690b      	ldr	r3, [r1, #16]
 80040e6:	b963      	cbnz	r3, 8004102 <_svfiprintf_r+0x32>
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	f7ff ff0b 	bl	8003f04 <_malloc_r>
 80040ee:	6028      	str	r0, [r5, #0]
 80040f0:	6128      	str	r0, [r5, #16]
 80040f2:	b920      	cbnz	r0, 80040fe <_svfiprintf_r+0x2e>
 80040f4:	230c      	movs	r3, #12
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	e0d0      	b.n	80042a0 <_svfiprintf_r+0x1d0>
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	616b      	str	r3, [r5, #20]
 8004102:	2300      	movs	r3, #0
 8004104:	9309      	str	r3, [sp, #36]	; 0x24
 8004106:	2320      	movs	r3, #32
 8004108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004110:	2330      	movs	r3, #48	; 0x30
 8004112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042b8 <_svfiprintf_r+0x1e8>
 8004116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800411a:	f04f 0901 	mov.w	r9, #1
 800411e:	4623      	mov	r3, r4
 8004120:	469a      	mov	sl, r3
 8004122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004126:	b10a      	cbz	r2, 800412c <_svfiprintf_r+0x5c>
 8004128:	2a25      	cmp	r2, #37	; 0x25
 800412a:	d1f9      	bne.n	8004120 <_svfiprintf_r+0x50>
 800412c:	ebba 0b04 	subs.w	fp, sl, r4
 8004130:	d00b      	beq.n	800414a <_svfiprintf_r+0x7a>
 8004132:	465b      	mov	r3, fp
 8004134:	4622      	mov	r2, r4
 8004136:	4629      	mov	r1, r5
 8004138:	4638      	mov	r0, r7
 800413a:	f7ff ff6f 	bl	800401c <__ssputs_r>
 800413e:	3001      	adds	r0, #1
 8004140:	f000 80a9 	beq.w	8004296 <_svfiprintf_r+0x1c6>
 8004144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004146:	445a      	add	r2, fp
 8004148:	9209      	str	r2, [sp, #36]	; 0x24
 800414a:	f89a 3000 	ldrb.w	r3, [sl]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a1 	beq.w	8004296 <_svfiprintf_r+0x1c6>
 8004154:	2300      	movs	r3, #0
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415e:	f10a 0a01 	add.w	sl, sl, #1
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	9307      	str	r3, [sp, #28]
 8004166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800416a:	931a      	str	r3, [sp, #104]	; 0x68
 800416c:	4654      	mov	r4, sl
 800416e:	2205      	movs	r2, #5
 8004170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004174:	4850      	ldr	r0, [pc, #320]	; (80042b8 <_svfiprintf_r+0x1e8>)
 8004176:	f7fc f84b 	bl	8000210 <memchr>
 800417a:	9a04      	ldr	r2, [sp, #16]
 800417c:	b9d8      	cbnz	r0, 80041b6 <_svfiprintf_r+0xe6>
 800417e:	06d0      	lsls	r0, r2, #27
 8004180:	bf44      	itt	mi
 8004182:	2320      	movmi	r3, #32
 8004184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004188:	0711      	lsls	r1, r2, #28
 800418a:	bf44      	itt	mi
 800418c:	232b      	movmi	r3, #43	; 0x2b
 800418e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004192:	f89a 3000 	ldrb.w	r3, [sl]
 8004196:	2b2a      	cmp	r3, #42	; 0x2a
 8004198:	d015      	beq.n	80041c6 <_svfiprintf_r+0xf6>
 800419a:	9a07      	ldr	r2, [sp, #28]
 800419c:	4654      	mov	r4, sl
 800419e:	2000      	movs	r0, #0
 80041a0:	f04f 0c0a 	mov.w	ip, #10
 80041a4:	4621      	mov	r1, r4
 80041a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041aa:	3b30      	subs	r3, #48	; 0x30
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	d94d      	bls.n	800424c <_svfiprintf_r+0x17c>
 80041b0:	b1b0      	cbz	r0, 80041e0 <_svfiprintf_r+0x110>
 80041b2:	9207      	str	r2, [sp, #28]
 80041b4:	e014      	b.n	80041e0 <_svfiprintf_r+0x110>
 80041b6:	eba0 0308 	sub.w	r3, r0, r8
 80041ba:	fa09 f303 	lsl.w	r3, r9, r3
 80041be:	4313      	orrs	r3, r2
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	46a2      	mov	sl, r4
 80041c4:	e7d2      	b.n	800416c <_svfiprintf_r+0x9c>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9103      	str	r1, [sp, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfbb      	ittet	lt
 80041d2:	425b      	neglt	r3, r3
 80041d4:	f042 0202 	orrlt.w	r2, r2, #2
 80041d8:	9307      	strge	r3, [sp, #28]
 80041da:	9307      	strlt	r3, [sp, #28]
 80041dc:	bfb8      	it	lt
 80041de:	9204      	strlt	r2, [sp, #16]
 80041e0:	7823      	ldrb	r3, [r4, #0]
 80041e2:	2b2e      	cmp	r3, #46	; 0x2e
 80041e4:	d10c      	bne.n	8004200 <_svfiprintf_r+0x130>
 80041e6:	7863      	ldrb	r3, [r4, #1]
 80041e8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ea:	d134      	bne.n	8004256 <_svfiprintf_r+0x186>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	9203      	str	r2, [sp, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bfb8      	it	lt
 80041f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041fc:	3402      	adds	r4, #2
 80041fe:	9305      	str	r3, [sp, #20]
 8004200:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042c8 <_svfiprintf_r+0x1f8>
 8004204:	7821      	ldrb	r1, [r4, #0]
 8004206:	2203      	movs	r2, #3
 8004208:	4650      	mov	r0, sl
 800420a:	f7fc f801 	bl	8000210 <memchr>
 800420e:	b138      	cbz	r0, 8004220 <_svfiprintf_r+0x150>
 8004210:	9b04      	ldr	r3, [sp, #16]
 8004212:	eba0 000a 	sub.w	r0, r0, sl
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	4082      	lsls	r2, r0
 800421a:	4313      	orrs	r3, r2
 800421c:	3401      	adds	r4, #1
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	4825      	ldr	r0, [pc, #148]	; (80042bc <_svfiprintf_r+0x1ec>)
 8004226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800422a:	2206      	movs	r2, #6
 800422c:	f7fb fff0 	bl	8000210 <memchr>
 8004230:	2800      	cmp	r0, #0
 8004232:	d038      	beq.n	80042a6 <_svfiprintf_r+0x1d6>
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <_svfiprintf_r+0x1f0>)
 8004236:	bb1b      	cbnz	r3, 8004280 <_svfiprintf_r+0x1b0>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	3307      	adds	r3, #7
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004246:	4433      	add	r3, r6
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	e768      	b.n	800411e <_svfiprintf_r+0x4e>
 800424c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004250:	460c      	mov	r4, r1
 8004252:	2001      	movs	r0, #1
 8004254:	e7a6      	b.n	80041a4 <_svfiprintf_r+0xd4>
 8004256:	2300      	movs	r3, #0
 8004258:	3401      	adds	r4, #1
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	4619      	mov	r1, r3
 800425e:	f04f 0c0a 	mov.w	ip, #10
 8004262:	4620      	mov	r0, r4
 8004264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004268:	3a30      	subs	r2, #48	; 0x30
 800426a:	2a09      	cmp	r2, #9
 800426c:	d903      	bls.n	8004276 <_svfiprintf_r+0x1a6>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0c6      	beq.n	8004200 <_svfiprintf_r+0x130>
 8004272:	9105      	str	r1, [sp, #20]
 8004274:	e7c4      	b.n	8004200 <_svfiprintf_r+0x130>
 8004276:	fb0c 2101 	mla	r1, ip, r1, r2
 800427a:	4604      	mov	r4, r0
 800427c:	2301      	movs	r3, #1
 800427e:	e7f0      	b.n	8004262 <_svfiprintf_r+0x192>
 8004280:	ab03      	add	r3, sp, #12
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462a      	mov	r2, r5
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <_svfiprintf_r+0x1f4>)
 8004288:	a904      	add	r1, sp, #16
 800428a:	4638      	mov	r0, r7
 800428c:	f3af 8000 	nop.w
 8004290:	1c42      	adds	r2, r0, #1
 8004292:	4606      	mov	r6, r0
 8004294:	d1d6      	bne.n	8004244 <_svfiprintf_r+0x174>
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	065b      	lsls	r3, r3, #25
 800429a:	f53f af2d 	bmi.w	80040f8 <_svfiprintf_r+0x28>
 800429e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a0:	b01d      	add	sp, #116	; 0x74
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	ab03      	add	r3, sp, #12
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	462a      	mov	r2, r5
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <_svfiprintf_r+0x1f4>)
 80042ae:	a904      	add	r1, sp, #16
 80042b0:	4638      	mov	r0, r7
 80042b2:	f000 f879 	bl	80043a8 <_printf_i>
 80042b6:	e7eb      	b.n	8004290 <_svfiprintf_r+0x1c0>
 80042b8:	0800473c 	.word	0x0800473c
 80042bc:	08004746 	.word	0x08004746
 80042c0:	00000000 	.word	0x00000000
 80042c4:	0800401d 	.word	0x0800401d
 80042c8:	08004742 	.word	0x08004742

080042cc <_printf_common>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	4616      	mov	r6, r2
 80042d2:	4699      	mov	r9, r3
 80042d4:	688a      	ldr	r2, [r1, #8]
 80042d6:	690b      	ldr	r3, [r1, #16]
 80042d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfb8      	it	lt
 80042e0:	4613      	movlt	r3, r2
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e8:	4607      	mov	r7, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	b10a      	cbz	r2, 80042f2 <_printf_common+0x26>
 80042ee:	3301      	adds	r3, #1
 80042f0:	6033      	str	r3, [r6, #0]
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	0699      	lsls	r1, r3, #26
 80042f6:	bf42      	ittt	mi
 80042f8:	6833      	ldrmi	r3, [r6, #0]
 80042fa:	3302      	addmi	r3, #2
 80042fc:	6033      	strmi	r3, [r6, #0]
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	f015 0506 	ands.w	r5, r5, #6
 8004304:	d106      	bne.n	8004314 <_printf_common+0x48>
 8004306:	f104 0a19 	add.w	sl, r4, #25
 800430a:	68e3      	ldr	r3, [r4, #12]
 800430c:	6832      	ldr	r2, [r6, #0]
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	42ab      	cmp	r3, r5
 8004312:	dc26      	bgt.n	8004362 <_printf_common+0x96>
 8004314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004318:	1e13      	subs	r3, r2, #0
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	bf18      	it	ne
 800431e:	2301      	movne	r3, #1
 8004320:	0692      	lsls	r2, r2, #26
 8004322:	d42b      	bmi.n	800437c <_printf_common+0xb0>
 8004324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004328:	4649      	mov	r1, r9
 800432a:	4638      	mov	r0, r7
 800432c:	47c0      	blx	r8
 800432e:	3001      	adds	r0, #1
 8004330:	d01e      	beq.n	8004370 <_printf_common+0xa4>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf02      	ittt	eq
 800433e:	68e5      	ldreq	r5, [r4, #12]
 8004340:	6833      	ldreq	r3, [r6, #0]
 8004342:	1aed      	subeq	r5, r5, r3
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	bf0c      	ite	eq
 8004348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800434c:	2500      	movne	r5, #0
 800434e:	4293      	cmp	r3, r2
 8004350:	bfc4      	itt	gt
 8004352:	1a9b      	subgt	r3, r3, r2
 8004354:	18ed      	addgt	r5, r5, r3
 8004356:	2600      	movs	r6, #0
 8004358:	341a      	adds	r4, #26
 800435a:	42b5      	cmp	r5, r6
 800435c:	d11a      	bne.n	8004394 <_printf_common+0xc8>
 800435e:	2000      	movs	r0, #0
 8004360:	e008      	b.n	8004374 <_printf_common+0xa8>
 8004362:	2301      	movs	r3, #1
 8004364:	4652      	mov	r2, sl
 8004366:	4649      	mov	r1, r9
 8004368:	4638      	mov	r0, r7
 800436a:	47c0      	blx	r8
 800436c:	3001      	adds	r0, #1
 800436e:	d103      	bne.n	8004378 <_printf_common+0xac>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	3501      	adds	r5, #1
 800437a:	e7c6      	b.n	800430a <_printf_common+0x3e>
 800437c:	18e1      	adds	r1, r4, r3
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	2030      	movs	r0, #48	; 0x30
 8004382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004386:	4422      	add	r2, r4
 8004388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800438c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004390:	3302      	adds	r3, #2
 8004392:	e7c7      	b.n	8004324 <_printf_common+0x58>
 8004394:	2301      	movs	r3, #1
 8004396:	4622      	mov	r2, r4
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d0e6      	beq.n	8004370 <_printf_common+0xa4>
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7d9      	b.n	800435a <_printf_common+0x8e>
	...

080043a8 <_printf_i>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	7e0f      	ldrb	r7, [r1, #24]
 80043ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043b0:	2f78      	cmp	r7, #120	; 0x78
 80043b2:	4691      	mov	r9, r2
 80043b4:	4680      	mov	r8, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	469a      	mov	sl, r3
 80043ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043be:	d807      	bhi.n	80043d0 <_printf_i+0x28>
 80043c0:	2f62      	cmp	r7, #98	; 0x62
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x32>
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f000 80d4 	beq.w	8004572 <_printf_i+0x1ca>
 80043ca:	2f58      	cmp	r7, #88	; 0x58
 80043cc:	f000 80c0 	beq.w	8004550 <_printf_i+0x1a8>
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d8:	e03a      	b.n	8004450 <_printf_i+0xa8>
 80043da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043de:	2b15      	cmp	r3, #21
 80043e0:	d8f6      	bhi.n	80043d0 <_printf_i+0x28>
 80043e2:	a101      	add	r1, pc, #4	; (adr r1, 80043e8 <_printf_i+0x40>)
 80043e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004455 	.word	0x08004455
 80043f0:	080043d1 	.word	0x080043d1
 80043f4:	080043d1 	.word	0x080043d1
 80043f8:	080043d1 	.word	0x080043d1
 80043fc:	080043d1 	.word	0x080043d1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043d1 	.word	0x080043d1
 8004408:	080043d1 	.word	0x080043d1
 800440c:	080043d1 	.word	0x080043d1
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08004559 	.word	0x08004559
 8004418:	08004481 	.word	0x08004481
 800441c:	08004513 	.word	0x08004513
 8004420:	080043d1 	.word	0x080043d1
 8004424:	080043d1 	.word	0x080043d1
 8004428:	0800457b 	.word	0x0800457b
 800442c:	080043d1 	.word	0x080043d1
 8004430:	08004481 	.word	0x08004481
 8004434:	080043d1 	.word	0x080043d1
 8004438:	080043d1 	.word	0x080043d1
 800443c:	0800451b 	.word	0x0800451b
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	602a      	str	r2, [r5, #0]
 8004448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004450:	2301      	movs	r3, #1
 8004452:	e09f      	b.n	8004594 <_printf_i+0x1ec>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	0607      	lsls	r7, r0, #24
 800445a:	f103 0104 	add.w	r1, r3, #4
 800445e:	6029      	str	r1, [r5, #0]
 8004460:	d501      	bpl.n	8004466 <_printf_i+0xbe>
 8004462:	681e      	ldr	r6, [r3, #0]
 8004464:	e003      	b.n	800446e <_printf_i+0xc6>
 8004466:	0646      	lsls	r6, r0, #25
 8004468:	d5fb      	bpl.n	8004462 <_printf_i+0xba>
 800446a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800446e:	2e00      	cmp	r6, #0
 8004470:	da03      	bge.n	800447a <_printf_i+0xd2>
 8004472:	232d      	movs	r3, #45	; 0x2d
 8004474:	4276      	negs	r6, r6
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447a:	485a      	ldr	r0, [pc, #360]	; (80045e4 <_printf_i+0x23c>)
 800447c:	230a      	movs	r3, #10
 800447e:	e012      	b.n	80044a6 <_printf_i+0xfe>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1d19      	adds	r1, r3, #4
 8004486:	6029      	str	r1, [r5, #0]
 8004488:	0605      	lsls	r5, r0, #24
 800448a:	d501      	bpl.n	8004490 <_printf_i+0xe8>
 800448c:	681e      	ldr	r6, [r3, #0]
 800448e:	e002      	b.n	8004496 <_printf_i+0xee>
 8004490:	0641      	lsls	r1, r0, #25
 8004492:	d5fb      	bpl.n	800448c <_printf_i+0xe4>
 8004494:	881e      	ldrh	r6, [r3, #0]
 8004496:	4853      	ldr	r0, [pc, #332]	; (80045e4 <_printf_i+0x23c>)
 8004498:	2f6f      	cmp	r7, #111	; 0x6f
 800449a:	bf0c      	ite	eq
 800449c:	2308      	moveq	r3, #8
 800449e:	230a      	movne	r3, #10
 80044a0:	2100      	movs	r1, #0
 80044a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a6:	6865      	ldr	r5, [r4, #4]
 80044a8:	60a5      	str	r5, [r4, #8]
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	bfa2      	ittt	ge
 80044ae:	6821      	ldrge	r1, [r4, #0]
 80044b0:	f021 0104 	bicge.w	r1, r1, #4
 80044b4:	6021      	strge	r1, [r4, #0]
 80044b6:	b90e      	cbnz	r6, 80044bc <_printf_i+0x114>
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	d04b      	beq.n	8004554 <_printf_i+0x1ac>
 80044bc:	4615      	mov	r5, r2
 80044be:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c2:	fb03 6711 	mls	r7, r3, r1, r6
 80044c6:	5dc7      	ldrb	r7, [r0, r7]
 80044c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044cc:	4637      	mov	r7, r6
 80044ce:	42bb      	cmp	r3, r7
 80044d0:	460e      	mov	r6, r1
 80044d2:	d9f4      	bls.n	80044be <_printf_i+0x116>
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d10b      	bne.n	80044f0 <_printf_i+0x148>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	07de      	lsls	r6, r3, #31
 80044dc:	d508      	bpl.n	80044f0 <_printf_i+0x148>
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	6861      	ldr	r1, [r4, #4]
 80044e2:	4299      	cmp	r1, r3
 80044e4:	bfde      	ittt	le
 80044e6:	2330      	movle	r3, #48	; 0x30
 80044e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044f0:	1b52      	subs	r2, r2, r5
 80044f2:	6122      	str	r2, [r4, #16]
 80044f4:	f8cd a000 	str.w	sl, [sp]
 80044f8:	464b      	mov	r3, r9
 80044fa:	aa03      	add	r2, sp, #12
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f7ff fee4 	bl	80042cc <_printf_common>
 8004504:	3001      	adds	r0, #1
 8004506:	d14a      	bne.n	800459e <_printf_i+0x1f6>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	b004      	add	sp, #16
 800450e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f043 0320 	orr.w	r3, r3, #32
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	4833      	ldr	r0, [pc, #204]	; (80045e8 <_printf_i+0x240>)
 800451c:	2778      	movs	r7, #120	; 0x78
 800451e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	6829      	ldr	r1, [r5, #0]
 8004526:	061f      	lsls	r7, r3, #24
 8004528:	f851 6b04 	ldr.w	r6, [r1], #4
 800452c:	d402      	bmi.n	8004534 <_printf_i+0x18c>
 800452e:	065f      	lsls	r7, r3, #25
 8004530:	bf48      	it	mi
 8004532:	b2b6      	uxthmi	r6, r6
 8004534:	07df      	lsls	r7, r3, #31
 8004536:	bf48      	it	mi
 8004538:	f043 0320 	orrmi.w	r3, r3, #32
 800453c:	6029      	str	r1, [r5, #0]
 800453e:	bf48      	it	mi
 8004540:	6023      	strmi	r3, [r4, #0]
 8004542:	b91e      	cbnz	r6, 800454c <_printf_i+0x1a4>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	2310      	movs	r3, #16
 800454e:	e7a7      	b.n	80044a0 <_printf_i+0xf8>
 8004550:	4824      	ldr	r0, [pc, #144]	; (80045e4 <_printf_i+0x23c>)
 8004552:	e7e4      	b.n	800451e <_printf_i+0x176>
 8004554:	4615      	mov	r5, r2
 8004556:	e7bd      	b.n	80044d4 <_printf_i+0x12c>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	6826      	ldr	r6, [r4, #0]
 800455c:	6961      	ldr	r1, [r4, #20]
 800455e:	1d18      	adds	r0, r3, #4
 8004560:	6028      	str	r0, [r5, #0]
 8004562:	0635      	lsls	r5, r6, #24
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	d501      	bpl.n	800456c <_printf_i+0x1c4>
 8004568:	6019      	str	r1, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0x1ca>
 800456c:	0670      	lsls	r0, r6, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0x1c0>
 8004570:	8019      	strh	r1, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	6123      	str	r3, [r4, #16]
 8004576:	4615      	mov	r5, r2
 8004578:	e7bc      	b.n	80044f4 <_printf_i+0x14c>
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	1d1a      	adds	r2, r3, #4
 800457e:	602a      	str	r2, [r5, #0]
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	4628      	mov	r0, r5
 8004588:	f7fb fe42 	bl	8000210 <memchr>
 800458c:	b108      	cbz	r0, 8004592 <_printf_i+0x1ea>
 800458e:	1b40      	subs	r0, r0, r5
 8004590:	6060      	str	r0, [r4, #4]
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	2300      	movs	r3, #0
 8004598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459c:	e7aa      	b.n	80044f4 <_printf_i+0x14c>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	462a      	mov	r2, r5
 80045a2:	4649      	mov	r1, r9
 80045a4:	4640      	mov	r0, r8
 80045a6:	47d0      	blx	sl
 80045a8:	3001      	adds	r0, #1
 80045aa:	d0ad      	beq.n	8004508 <_printf_i+0x160>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	079b      	lsls	r3, r3, #30
 80045b0:	d413      	bmi.n	80045da <_printf_i+0x232>
 80045b2:	68e0      	ldr	r0, [r4, #12]
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	4298      	cmp	r0, r3
 80045b8:	bfb8      	it	lt
 80045ba:	4618      	movlt	r0, r3
 80045bc:	e7a6      	b.n	800450c <_printf_i+0x164>
 80045be:	2301      	movs	r3, #1
 80045c0:	4632      	mov	r2, r6
 80045c2:	4649      	mov	r1, r9
 80045c4:	4640      	mov	r0, r8
 80045c6:	47d0      	blx	sl
 80045c8:	3001      	adds	r0, #1
 80045ca:	d09d      	beq.n	8004508 <_printf_i+0x160>
 80045cc:	3501      	adds	r5, #1
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	9903      	ldr	r1, [sp, #12]
 80045d2:	1a5b      	subs	r3, r3, r1
 80045d4:	42ab      	cmp	r3, r5
 80045d6:	dcf2      	bgt.n	80045be <_printf_i+0x216>
 80045d8:	e7eb      	b.n	80045b2 <_printf_i+0x20a>
 80045da:	2500      	movs	r5, #0
 80045dc:	f104 0619 	add.w	r6, r4, #25
 80045e0:	e7f5      	b.n	80045ce <_printf_i+0x226>
 80045e2:	bf00      	nop
 80045e4:	0800474d 	.word	0x0800474d
 80045e8:	0800475e 	.word	0x0800475e

080045ec <memmove>:
 80045ec:	4288      	cmp	r0, r1
 80045ee:	b510      	push	{r4, lr}
 80045f0:	eb01 0402 	add.w	r4, r1, r2
 80045f4:	d902      	bls.n	80045fc <memmove+0x10>
 80045f6:	4284      	cmp	r4, r0
 80045f8:	4623      	mov	r3, r4
 80045fa:	d807      	bhi.n	800460c <memmove+0x20>
 80045fc:	1e43      	subs	r3, r0, #1
 80045fe:	42a1      	cmp	r1, r4
 8004600:	d008      	beq.n	8004614 <memmove+0x28>
 8004602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800460a:	e7f8      	b.n	80045fe <memmove+0x12>
 800460c:	4402      	add	r2, r0
 800460e:	4601      	mov	r1, r0
 8004610:	428a      	cmp	r2, r1
 8004612:	d100      	bne.n	8004616 <memmove+0x2a>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800461a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800461e:	e7f7      	b.n	8004610 <memmove+0x24>

08004620 <_sbrk_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d06      	ldr	r5, [pc, #24]	; (800463c <_sbrk_r+0x1c>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	f7fd fda0 	bl	8002170 <_sbrk>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_sbrk_r+0x1a>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_sbrk_r+0x1a>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200003ac 	.word	0x200003ac

08004640 <memcpy>:
 8004640:	440a      	add	r2, r1
 8004642:	4291      	cmp	r1, r2
 8004644:	f100 33ff 	add.w	r3, r0, #4294967295
 8004648:	d100      	bne.n	800464c <memcpy+0xc>
 800464a:	4770      	bx	lr
 800464c:	b510      	push	{r4, lr}
 800464e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004656:	4291      	cmp	r1, r2
 8004658:	d1f9      	bne.n	800464e <memcpy+0xe>
 800465a:	bd10      	pop	{r4, pc}

0800465c <_realloc_r>:
 800465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004660:	4680      	mov	r8, r0
 8004662:	4614      	mov	r4, r2
 8004664:	460e      	mov	r6, r1
 8004666:	b921      	cbnz	r1, 8004672 <_realloc_r+0x16>
 8004668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466c:	4611      	mov	r1, r2
 800466e:	f7ff bc49 	b.w	8003f04 <_malloc_r>
 8004672:	b92a      	cbnz	r2, 8004680 <_realloc_r+0x24>
 8004674:	f7ff fbda 	bl	8003e2c <_free_r>
 8004678:	4625      	mov	r5, r4
 800467a:	4628      	mov	r0, r5
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004680:	f000 f81b 	bl	80046ba <_malloc_usable_size_r>
 8004684:	4284      	cmp	r4, r0
 8004686:	4607      	mov	r7, r0
 8004688:	d802      	bhi.n	8004690 <_realloc_r+0x34>
 800468a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800468e:	d812      	bhi.n	80046b6 <_realloc_r+0x5a>
 8004690:	4621      	mov	r1, r4
 8004692:	4640      	mov	r0, r8
 8004694:	f7ff fc36 	bl	8003f04 <_malloc_r>
 8004698:	4605      	mov	r5, r0
 800469a:	2800      	cmp	r0, #0
 800469c:	d0ed      	beq.n	800467a <_realloc_r+0x1e>
 800469e:	42bc      	cmp	r4, r7
 80046a0:	4622      	mov	r2, r4
 80046a2:	4631      	mov	r1, r6
 80046a4:	bf28      	it	cs
 80046a6:	463a      	movcs	r2, r7
 80046a8:	f7ff ffca 	bl	8004640 <memcpy>
 80046ac:	4631      	mov	r1, r6
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fbbc 	bl	8003e2c <_free_r>
 80046b4:	e7e1      	b.n	800467a <_realloc_r+0x1e>
 80046b6:	4635      	mov	r5, r6
 80046b8:	e7df      	b.n	800467a <_realloc_r+0x1e>

080046ba <_malloc_usable_size_r>:
 80046ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046be:	1f18      	subs	r0, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bfbc      	itt	lt
 80046c4:	580b      	ldrlt	r3, [r1, r0]
 80046c6:	18c0      	addlt	r0, r0, r3
 80046c8:	4770      	bx	lr
	...

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
